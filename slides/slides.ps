%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: slides.dvi
%%CreationDate: Fri Sep  6 10:49:09 2013
%%Pages: 5
%%PageOrder: Ascend
%%Orientation: Landscape
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMMI12 URWBookmanL-DemiBoldItal URWBookmanL-DemiBold
%%+ NimbusMonL-Bold URWBookmanL-Ligh URWBookmanL-LighItal
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o slides.ps -t landscape slides.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.09.06:1049
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: URWBookmanL-LighItal
%!PS-AdobeFont-1.0: URWBookmanL-LighItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Bookman L Light Italic) readonly def
/FamilyName (URW Bookman L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -10.3 def
/isFixedPitch false def
/UnderlinePosition -125 def
/UnderlineThickness 60 def
end readonly def
/FontName /URWBookmanL-LighItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-228 -281 1269 930} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A56504B5512585B63F98DBCB5A4C0
2299C31C74F084637834C25215DCFDC6FECBDE68B09CCDBBE673949E7B5BB2D5
0A39AD469FF1B5D60AB0ACB5E03B277100A08A46604E41870F03480F13147AB9
CD551BE794727257E641A157240AFB4B3B07D42E22F8A9D105B5ED85E4E6E8B0
6201FA540CCF38F4D238BD09F32843CE74E8BEA41A0C19C6ECB98867CF41EE53
1DC9A9EFB927C69F0BEC6DF08D7F26C11F8660BD6D900C5A6ED83F10B9941ABD
A4AE95A7C032B2697095FE6AEE57C3AFC6D1CB9AEAEAAFDABC392A5EDC5C430B
BBE329EDF645443EF2FBE758B7C84F868ADB068EB40706B3A5064E98798D17B8
85D1649B30E53B44DDEE64DFA7BD4CD23E7F7BE88ABAD1EF04AA8AAD6B261F49
58731E8AC796331269CCF4C52BC82FDB88EEC7FEEED36B223911A31F7BC749E8
9A139A2611DE492BF5BB57B353277CAF7FD76C05EB04311AB32247AED33F217C
469391F32408ED6430ACEAB384F85801A2CABDAE307D5BA6B3152B775E58733C
C7A289D0A8B63F16953936C635B4C9C6A8F4226F6E08546CA2FB881473F39164
46E1BA4E7A2C2C4D8223F71391A238AC9B53E31F1798736DDB13169493E8E1D4
9CEF8AD786828251FFF8B94BF5EC2D42E2CF6ABFC49DD7B079369872C4A1E9F3
212BB48A4A41CFBE7EA36A8C0DA6DA523FA0483E968149AEB601AF2DE70AB966
511429B93CFBC1425D04C1C6A340483EE48791D3FF6A4B2E4116D92E79AAB90C
59A4C678A0C1AC2D4B443ED92E47F40807A2C2B99BE3DBE80E35CDD873198F52
325C389770ACABF0587BA11BCF2C130A991D9652A601A907FABF0E07F0B41A8C
6EF381E1613EA2B2FFEEDFA2BDB894E71ABAD2B9AF7856853449292DB1A3861C
B8A74600318B1215AFC43B04A1FD7DD57CB62D8C062AE13028EF0F8AF6A05783
6194991309CAB30AC5BAD89680E35CB3CE143E0B15C40C5F2BE92457F8D159BC
5086CFE6D15CC9BACAA44DBC95F2FD703A9D966044DD3CCC314B04BAAA752362
8FE96FFFE56BB13132D2B9FB28B1B954B1421779CADECE0C75A78B3972DB7DFC
DB592821C77979991BEFF46C8AB67AEA245C6F0F017B31F3FEC4AFFC07005FB6
2AD3C3AEC312A96E832D92CB6633B881EE328FEB0692AA733A3822D3CB26ED90
10D9D8F56E7F4C814DF759C9620BB20BE364F998698DEF424F2082FAFDED4949
9FC805AFD18DF56F31BB869EA93EA653EC384A8EFD58C7DE4938EF1CA411B455
66C1D73A8143C8A24C4A470432BD989259DE2921076B58A9D69B6A72F68743A3
C4DC4D7CD5BAF92BA781E14282982C1AD13479B6178D281CAA541FD117888B05
3D6CBC34EC86D2CA91E32214DD857E80C15A3230F195AE7E6F4D20CAB9F8DC6E
18CFAF1B03149CFF8A4427B00164D21F816708436200C6EFF661111050F2E577
4E0A4FEC450DA5AAF1AA75CC72516F881FCCAC6C165A39EB148B25F23459D299
6A7896CB23F3CE856A4417B9F66703DE69A65DE65B00A629EF39E571B3F412AD
4EC3D83D0BF1564C00C405693F2830C96BD95CBD6A63F3CB3D55421CF3C99699
3FF175FCB64763FE8FD1640C2660176DFA9253689BB1D919F07CFBE88804F4BC
BB80DAEF44BD3C3C36FABC9898C39A1281DC5ED17653DFF7A81FC83C826A94C6
EAF95DEE91DC3F7E9F8BE834F74A616E8415CF27C45923F72DF97F498371BAED
B7B887A8C6479AECBDAD3753FD6C056586CEC7F8ED7C623E5517726F6028288B
8CF8760C96C7B9CA647E44F7C808B103D657353EB568D8220B13F44F655AD6FC
40955A3EE68C16EF312027D73441D9F4437F9AFEBA80E85A7302FFC4B5D0A21D
D364AD6A19F8F0894C659A61F005C6FCE1A0E9700364A03D06F0EC8452CE90E8
9C362E554C8E32615CE5CB01FFA1D391A7728D51B18A0E1DDB27E711C889B7DE
042873B96E9DEF3EAEC6D5B9A045F9280D79AC9E0A313CD70EE4FFF69593AA74
261826A24F89930C9E243574EF646B86F3F1CE756EC0C78188CFA735658850FE
6A28091D0C6088D01C99BB01C54605A556A6018FC657F254438F234303E15D8F
7E4DE009307129C044501CC2EDFCAABE8E6BE1F2BC739461D428AC334942DF16
E83C7C6381716EA9FDA8379DAFA5415D1C28347F6792C972A3E0A898D5A86700
DB90644A3A2A34D44BAE07EEDA4D1042BE0DB0311AAD05E48B2C312C553C6B90
4264A92A74FDB2B29ECD6CF81A54A3638210C9CC0D1357BE9CAA1126E0B29CCF
37CA44199F828A680C68C026458DF297F410F90CA7DD41C4F4F494217B9B568E
4D43485B8EC35101546D1C427FC2343D5DEBC43D4ED87516E6663D35073AE074
42D24BFDFDB510C05DF5F69DCD8FB92B332FB6509FC3FA395199FFEABC396F33
49E6BA39D975E878BEB31930671A59F0996D3B9EC53E7FDFA26F060FC8838925
86428602BBBE9B17E090FCC1137C613AC61B6452571F9A33E04DC29BC5899906
56D0ECA75DFC764023564E8FF99750F041E6D6D1EE9CE21AF6B0637AB23DD743
CA174071B8219A656D83139769F56B466B95CF4D412DF23AB1A3BBECD38DAFA3
F671958441085A247E4D927532D1A75AC0244C26ED6EEA47C3FD8D9159594CBC
CB611AE1581FEDED9A2A1841400CBA00202C1803739A8B94BC7F4DF07A4DE07D
03E69BFBC8650851AA63AC4A585827DCB50969D6E738FAB4FCA6C32FBC25A59E
864F48EB9657AC7312FAC9897F56ED09E02AA857C6FF5C6D264C08F4AFE461E5
A2EF030046700B475E00D41DC4FB2EB988DB6254CFD706847009D7C001129408
43FD03A0FD7DCC0F4E58304AAC2D9AD27F8A67E78A44B9101E12DE774C78A0BA
F5850C2E53334AFBF076DD27C50764AE6E78BC4E9790236910A06B75B6011FC0
D68D1E7A627C3FE5D8F062D7FCBA5245B38B7B7C86D0D0DF64B37AA8944560A6
CD0B93B6ADE804ED2E612FD6D9242351C65D2F63B02B227DED699ADDE69F0F8B
9FD9D7A6AC1A896380F2762679E60FA6E763176CA8AE08A9F210E7F1AB6D353F
53B91B12F8AB7B8604558A6B538B4F5CB6DA9FA3FFBB481C9AFF1455A0338C5F
48BBD28B37BD51EAC7264D45CD2BB8B613752F6CE1AE01528C75262EF6C5B60B
D81D2770945D3D682C28C5E0E314F947ABE611D0116A4040CD614F18EF906BE0
8F5766FA4F3557D0CCC9EDF31BF84531D667042D5A147F0A784F0C5A4E1934FB
A251CA55B73D77F4C7965E5E2A1303E1863D4979A4D16E807CF86488D195677F
396E04C5397A9827921C64A06B4732302C3C670D79239ED9C23CE1CB161F5009
1092627CA0CB7118B1B44DBB0703BEFEDB3681A2B60906330212907B3BD358D6
931EEA4A860E1A17079A59DEB9C7A4CB9868D0F31A2535BAF0751997AA548B74
B2812D609AEE7B061E721B992A9FC9C9E460A62C80FC2A395F396C253F7CE374
5FE9FA4FBFFFCAE245A23E831BFC894428862870D89C85F9ED42D3F61FE849DA
CCBABF3ED8B25927B9001E6ADAAB86BA6B2B4E28F3C65566EEA26A3B2DE83040
B16BFFBBEB73850E2199B8D101C405DE59F506812770372AEA533706FB1C83E1
4DFB0D94D7E8497B4627AA7EA898E601F73A5521C5705E4E01119FD511DFCAC4
0C82F3A7EBD95CB445FFCFB67C79B09AC4F26D73919A947ED728C2F3EC58B23D
66FD1123354E6C1AF537FA3A7DFE947A55E812E330ED061D52C102C0B70F873D
114137B6C94F870230F0E2827D1B76FD3AF2EF81F4623E7A24F2E0E458AC9F2E
E3A5B4314B8853964A588D9526AC2EDB5F32798BED2503EF77FF56D17D89DCCB
AB7462F8AF8CFA76772D207D8683066FD5D51EDEB3149C3655ABA6EBE72E55AB
10A498FF7ABF6C856BA398092A14CF06D520412CE50BBCA640FBECF9EBD50EE0
2964F1901A7B50570FCB68E8CEE14B696A117AF6DB8E5C578F9944876A4B455A
FA770ECA7F51FEB14A9A81BB95F4AA27B8C626C1C31935EDFB35E3C77FD65E7C
6930FC8A7078348B6B5A0CAD3F23927DB43E66676977BF6873655C3B62250D46
F22906227B4D7B5E814E11104B72AB12961AB37706382F4E6FF6D2769EF004EB
FEFEB3D39086885EFD22507ECF9D1A813ADFAC0B3D57B08A6F2FDDCE250F72D2
1E73A1136BFFA3B0957C1905348ACEA2471AB4CA5907CEB6B7D5F265BEBDCA4C
58DF75153E603AF1E5D0ECDD74B16E236B1704C8D6D26B3226DC5DDEBFD6680A
2BF81E9C990A17DB0EDF2A084E7A3EB215C17570F7B747682DD27DA4A0F8B831
543237FD633213746EB3C92695EDFE231EB02312C96A53E860CF1E673190AD0D
6AA065E4ACE4C226D33FB92DE90991CB9AB9A40788FAA947F462AAF8178718AF
1A3A1791A537AA1E1426F7029CAB654F3C24E9BC985EC95722F2DC8433F4C1AB
8EB0F42B92069DAD4D7AC40526C23FCE9BD02AF0DB7FA95E99B648A29114BEB6
A5589F1C54C532AA3D7B54A5149FD0722FF8FC6091CA6D1B43BC330E4ACFEB7F
B8C88B5878EACA7A1AFAB3168F374D23C817C9C80CB8C6B74DF042700E618CD1
422C7578CBABB200C23E408B50016B504922723331908696E803B034CCADB6CC
C8B53FCB9593548DCB78950B5B6EC5929FDC2521D581B5F21D638E8170C2E895
3E5CC99E232A0CA928CB2A698ACBA7D4DE3CCA5E608A293A8E7E477BB9673A88
589F54603BE7A075F5C14EA5A2269B7FFB1CF8DC8B2C072F1EE6BF87B4D64658
C08A1161BE49E96DB2FB941AAC0C3890B2B4866841DF019685DBC461EC406929
0C5E973943ACEA4221CC26D16628408B1DA5E0C69B3DA4EA8F5FA5D56503FFCA
C15795F337491A8C4BEDE95630D7A5A53984551C3BEDFA000FFC0D763A29A196
BEE0604811BA8BC97C8A801572AC0CF99567F514AD8347295063C990E62B258E
26E398918A03B37FA4B666C54EDCA21D5846029DE1467125B7EB3C9E6FEFF634
DFB5F469EBE447A68F1A9E8D02ECF76187377A7F70F555DFB62659104B2C1FA9
C4312BF1BA5E7E1111F66FF72A3429C7FA18B190A80388359E23A43A09DAC9F2
4E9E2FC060390F4FB6509440A6BD691F4A5883BD6FEEF944C90C080C29A94627
E6422DA29736974ADCE3C6BB7FD52B431AAA3239363E5C181AB9D052CDFB07A6
A74B8B9F65F7BFB3792E3A165BA8FA0CC8B98E225001413DFCB2C225ECCEA316
CDE8A62D377AF3CE7952B654A518B5F8D00297CC6C8EBFEA08384809CF652F1E
602E7F27CB155C69FC07CB5DF5093B7CDA7F1780DEF8060D7DA7EB45BFBFAE7F
D7AF2F2D88EDF98F93AE9EB669BC8E9AEFCC95104214B86E9F3F4550026AE8DA
DFCB1B2FA2EC3EA4A24DE8277E62F49FA342EA7746EABF996F87D9EA3C39D0A0
365991BD08E9028242C93C3146596D9E0E431BEFD018FD502887DF8110D16CCD
06AE7C509DED637E72DAC09DB6E1C9A5F59C9E0B8D13574FC2C5BEED13A551E3
CC27B40D67939C4B12F7B88D68D272002EECC76E45EF546CAE548825A0BCA6BF
93B0B1373AF60A7D81FCA1A863B355EC5C225894839B4FED57E91C36C38B1EC7
980216CF5F7DAA44BA982BBB0CD6FEFCF89BA282CD0C910FE12D8CD6A6C6A3E4
A1518E2BCDF099DEB7DBF6A3EB5A3F665C5A98F578A03948821E40D1608FBEE9
F91A24DD7E5975965843EE8BFAE98A1C243F36885AD4E5BEDD97447886FE244E
E436E7ADC2866D5CE1B8EE2EA063C6EB6939B4B36C663316967E5066FAEDE5F2
880E7ABD580D75F5873A6F37020AF88EF7E6D9C645D2E90E0933C19F36D5557E
8CDE9B86BB0D7806B03A4DBCE17DBFE94D5F6B36133B9FFAF07082110264E4B8
23934CE3E4504B0E2ADB99F2A0CD43BFB6DE055DC28C1B3CD73D0087B2FC75CA
D18883113AAADF162B023352069DD08858153E4C2D0977265870EAC015A30969
05876A004011723C4D739EC41CB885A429042F21E131BCBE2361362D31116809
206D8FC9AEA87866065A86E8C27F8FF283A143C15CCE64A657C543DA764A1961
0D5364892FD7605589728758241D75D2E3989C3BD46A0E19F9B46BBAAABCC7A5
1E4AD7D2CAF1775097BC6763A601E8445B4EFF848491740660FFF722FC15CD86
E5EB45C7FF01A6AD7B9DC680D73C19F9AD2C74C0F7CE461F2574EDBF2E2BC34E
CF80B870F3F5EFDA7CA0474724329272DA3838C0B0DCA9687F352DBA807E1F7B
39F8B568830A357F32DEBE2FD50FD0E8122B50B10FBF7D0545D94E6642DD04CB
DDE36260C31DCB571982706F10E88716628E060EE785F87627E1DE251A31148E
BE2086F0807E0C14D02A3B3247BFBEEF0E7CC4E47FB6C8517E58DE258FBD50CF
651BD845DCCCFC237D266EF13D18FE46B759024F063CC489A09D28A403F056D9
7352C975D0CEBE03785EE94AE63B9700E91018B885C12DD9D12D9CC0088E9178
425435790F227A41D73965461EACD1ECA05C6C4741C852BFC44FF1A0B4403076
4B2137828A368691ED71E947C312D33EC8182CEDFFE06F9914291E10EBE0222F
270370AB3AD45AD5BCB41C7C1CF2989DFB8A7B4C43BAE25ADDABD272A8CD50BC
3931ED4C364FE0E6B74A3A5AAB476C909A6686406F6448229828423C472C57B3
10A4FF3BF500767659052C27B74665AC6E9E60C07909D06D81EE46A33E8524CF
4860EEAD3214B7BE5735A16C672747C806958EFC69D5616B7E05EE5623CA63D6
59ACEA39EDB6AA6C6F9F525792F7059D3FE7A4FCEC197422EA27D102D0F987EF
CC478D204427CA315B4654708427680532BCD530718A98191C979E140209E203
200390F059C17D3EA3498E72F6A091C0672A16C6D4D05AB7C96E062B488A9A8E
DE17EFFBDB841AADD1DD7125B010D83F0F0149BBD44441FCED874FA9D0373D42
A380A57217E21244AFD5E5EBCFE359A5FB382EC50025E8C6E56577AD2D663050
B60F476D94E3E1F1B36A7A8DC7A979BCCEA595242A047C2BC601865FB684F695
2FBBCFECC9BB1E7602BB6D34AE8C868A743835731E6E133D8F975534536A67AF
B497C547A935602D15A8B216EC5AFDF1446EB77FBAD6EB97CDD6090AB0AEFF34
ED82C4E7C34E17674359A22A6E6DA600243F79DEB6EAB603EF79534F8DCF7BD9
CC34525F821DA816619C79539574C2C49E4B23EA34860874DA54382007EFEF68
6D22DF76185F213B1C05C191897A591B7CC28D55C896A6270E9EA73F8D405707
E0E85D1A1CA913B223D01BE58686472A0EFE2E7B5F14CCC41628608CB49493F8
64AEA8A85FD79B4A4AA09C10654B3C234ED9113194772ECBDA0ABF42DB3A3A61
89F58A4D61A0D791C09C60BE17105303E7A0D39FFD81A90DA99DA37D62FF15C0
DD6E28350E8A4E89192A8384135144996A7C237C23D360F46F352BA3F444C63F
5DDF1785B643497E19177F117C387E414651C75A1839D47E1E256DB4EC031F40
8237C1CFE06766C076451AF42F44AAEC21172CAA7C07619FE68C3A811EF180AD
2C46B9BA2635DBDBC5F95C46DC6553DC9E0C7C69B23B8D1B55C9C5E4A440CFDF
FFF28810E862E1BFC602B0B9F5C00CD1E96EC3EA118D56B91CDE574A398775AB
35057DF9DBD3AD19ACCF3ABC86C9A6F2F0752997E7695F42290EB4FB9FC05BB0
57477670BFA6A47901EA4E7B47ECE15B8653AE7AD19263D456716C5987B3FD0D
B60F3F04B517C1AAD2FA85A93785518CC57167D966EDFDA7B224BC18FAC31FB4
14B1CA6011C53BD80576D510B1BC0D933FF414C7DC50A44DC54D3E50659FC376
F298EAD21F1E7FA417EBB620CCB37468ADC459BC96F3507D729A65FEB7055361
861E3FEE47CD5A6621F42667CB5F52838B11689BB8F0DAE1B6B60A5055543FB5
99A1D549FB73BE8FA7DCBB852BDE2C2D9F2669FBE01D4A0C8FFFEE42B5C6BC07
FE056C8964A53F86F3B008710C0E07C42B92571D1CB29585313EB43D12E5CFD3
864C4D9D9E9661EF99CE52EF7CD5A8F2A3CFF9C78017A987E20E96B019BAB3A6
278DE0CA378C39BEBC3C5411220EF5C5D9008ADBDE3E44A40ABA380B1B2C6838
648C5F4A5F67D828A56AD77288AFAAA9268281D2F8BD384AF7BD34E5BF9C554C
DE5D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWBookmanL-Ligh
%!PS-AdobeFont-1.0: URWBookmanL-Ligh 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Bookman L Light) readonly def
/FamilyName (URW Bookman L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -125 def
/UnderlineThickness 60 def
end readonly def
/FontName /URWBookmanL-Ligh def
/PaintType 0 def
/WMode 0 def
/FontBBox {-188 -268 1266 930} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A56504B5514355FF8B9E5BFBC4AB8
604ABCF69C48FCBCAE18BBF33A92279F42C49C38B58F0918DAC5AFF151581C58
9C56F8C603A48090744BB72269BDB0EC01E9892E5767FB97AA5ED512434CB940
5997AABB4CE66ED065336D82FFC8B5E9B7C6B33A22F7B0146C7826299A4584D6
EC4EE35062E5123FDA5F73BE51424EB16D60E188CC7FC0693B064D695078F845
6F28D4FC8CBE2221DBDEC59DCF4DB4CC178CE54A740B3C263699579A9E63FDD4
DCE2B309DDFF8A419CD3FEA17E9D51F1B8A6ED2B3DC8D565FF3EF0E8699A0AE3
ED85B48ABC3FFCD346857B8E74EEFB771F5F5C9E00658DC5E246A95C5EBE049C
DBE16BA8161538D3697505DCB75B9178032462E2F65235AF546EBB361FBBFF20
8FFA0F013B4E1C47AD2AA54937D99F68D66002AAB23463F661B09004E963FAED
04AFBBBC220B019EA274563D74EEAC4880E9693B5626AD31E6ABF26E1AE59636
EA499DA34EF0F164A667FE1B0EBC93D9D2A86758E6D02469B53238244090463A
B60AC4E1F82FEDA4672D20D117954DE4C2D722D37DA9667B85A552D850266B74
5DF9BF1D1C2A87BCD66F575CEC327F2630478C7B344C76AF308C4C315B6429D5
A6156F7DA2F8A6B9C33FCC9ED2000D7E64EE5B6198AB8A65352D415137447E9A
25A6241792F15786E08B9CC90FF7BF9CFD74297C610C99CA0FA40C88F50779F8
65AAB5601080720B436D165C19D5D57BE32FDBD2A2EA03361DC4B26F150B4B97
F6357081A9556485413F38C19BA156DCED1E8573F5FD8E3F4FC2821B27B5BFFC
F5B0F835795C35E2304190985F21D2B20193198497BB4002D52ABDDE3F5B485B
91B2CE3F1E4497C21E877804CBDAECA4DBFB4AA2E3C8D296E12BCC04BAED4136
99E71BF1B69CBDA9B2D0AC17261CB20E3FC3CEFC2C107ED043B53653B8D8A683
69253315DBF0E176D3A85E92B2025257BCA59A63CDFC0428CAA4802FA81E861E
D85CB5BF8B64C000FD9A9D4C2821DA91B2E6B0A3714B60E3CC483707B7ECD881
2C7EB8E1AC75EF2E7F2C8D43CBEE7188A81B35C7A14B1BC954DA3324B6F14D5C
574C11021751638C5CD24367FD510B5D0E097915D4EEAF298C165C3ED94CE88D
1D141A7EB4F5471121619B6102A67CB636385E5A591151037B14C26CE70CC741
6853ADDE30FC98D302110745AC3783CA2253FA685FCE4A3D6C6586DE50D6B9E5
B2398E223355D5784800A5C3DEC0CA35C42158607ED226325923B54099E01A4C
7B87E4F5D4691391449266B8229CE86AA69EE67899BFA6B10949F39F52077A85
89EFD4BC3309A0709AA29144F3A403BB512C97192E8E1F0AE853CFBD8A864A96
714FB8C4C3B98D5DE6831D51B47086683BED6F82BB418528EE8BCDE564499158
48291207004B10A0DE37EF1316989AFE00F0148664D6B446A8E4F9B88C747FE8
D6203F8C21D9CC04E187BE53F8FED4F33633BA03A166667F39990AEE1A43CF71
23A65EDD143AB5D893515E2D8DB7DA53533E244DE3DB1C186C1DEE5D78201812
6F3577E87ADE936A6A10BF199A9527D50E288E61E1BFDDEE486EDAA38D931F54
4C4DF2A77D8D210D9BFAB685D3C7146235E1F75D2D02D9941A488BDBDE31676E
57E765AC6CB4C052198E87F09476ECDEA2162CF6F8D703C6508CB2DC5D586678
999DBFF6A1269CF668B9F5C990DE3196B84BE792F51E17583FD618099FC29029
DE39F393E7D50D28C63304BA3758C5F63FFC89357E3671F2D1F17FD79BC48A77
8BB8A47F11CCAEA34D13AFF8DC2A43F86A902F7407F9CCCF2F901645631CA225
811B174959C0DCBC8B95F1B879C23AB00B60CCEB075B7A849768E3AF8E18EC31
EF12888ECB54A86A5456A0293797A1BD1FAAB9AF2BAB48057F7D032690907A7C
3E858F279C4F87B0EF573AFFA92C571DB75206A5F117077BE5A8813783C8DBED
5C1459BFD6A52297BE877AFD483B7A2E45D5CBB0102003F0A7C5BAB3F09769CB
0CCA5B1CFA6A01DC0EDDAF6CBD092B0CBD2223900A5A4D8EA5A1169936522382
A3D89171BE3366206684D3DCBDCA5537ABC8C2B536D78220C3B24A9AED495127
0EAD8B3FB7FFFAD84AB0CC35A5E6894193547D1B437DA59E2E6681FC2BBA58F9
7435AA0F3A213360EB7C2C60EF8FA8F3AAD3ABA24340D937A6C2DD7C2320DC37
841E76F57069E9178CABF57F00DE38DA7BD7171FDE19B2407F893D523EB78106
6E9CAFFC77013F4B7689E4DA16C4AC387CC4804F6F937CDE2766785B6939FB1F
F0BB2232BA259FC909D713B8FB1B33A25F4BCC90B6ADFB4DC714D6D0832274D8
E0C96165F1DDAAFE732B4D2F88F3AED9A0475CA4669681D8058179F67449AE65
84B538A32295BC5E3E314CA658190A354DAC0D391F423C16690D1F50D2693042
FC09D14C99A69FCCAE3D3BAA6C3EFEBAACF76BD441F2FDFDD1B4174B45501FFB
0478D14C301A3AD42111CD579977D630CFB6B5A2A31B660C7C103D442E6D037E
1875EADCF481F27673BA7F253E0B2337E6BD7B5E2246AA9E837F39F113D935DB
9E74C2E94E8AAABC940EAF782A3DD97E9D9C38B45594AD68EE45EFD80F4BACFE
7CDA4FFE64DCF7591F16BFC51EA0DB9E86C3BE2298DFBEC78BC36F7746A67EBF
2EC7FFFD4B24E5C4F45C6B35F7A256EF60CD7D35794F55D34C07517499282155
6F4E2234E00BC6D71965ABFFB6F138B76330C265A5B7F41D915514AA0FAF252C
2D470BEF426F18DAE625C2B99C0E088ED65F67D42CE5148E2AB1785A6C7D106A
B4A2CC33E43346938178BFB8E2B0A8D4BB062B0690FEE60D4517CB8EC6A76EB9
0F760CB3DCC87392A9FDB4F0A407E67926A4C335B9EBDD15C7C8FBCAF232FC4C
567CFD7F82EE726DBE6FC611C0DE53695CE804B7463204E96F011EE6CA8DB225
952A1A00237552934829824046E10E39028ACCCCB0D00281C131611B0EE9A983
FADCC302B6E3FDE8F35C61981A28AC72D636AE969256DC91944150153C99FBFF
33FF0434C3077A2428BEB3FA5E46ED9C413EF195DB370E9ECF7515A0F23D18B3
6684FFE56A55E18E0B8D3BA4E0C4056032303B61D3F78E712948EA8D08BF273A
DCE73A94C82A96520B00323D1EEF4DC861F9E8D0E59BB7ED57592ECBF980681A
1B4020B86A9E14E6776871D14D7134EDC9C2975B4ADCD6D9099826F363FA8067
8B441CF1E7447E0D79362FB4D7D3DEE02F5A89BF4C91222775300DDF7F463EA6
0EDCE62116ECCD4720323E2D204512584029A7E941946AB7D45710ED43928CE2
EEAFEC10ECA86DBCD675244FA279980B91B1C42A3753CA82B54735DEBC58CDD2
79FA9515D92BCFCAC07EEE4F17AAEF29B1E846118AC9F0B2E42C04E3EB40E7AC
C6710BE72189808660902A72A17AC233949E7ABCBEC7B18D4B6DA7E01BD17EA3
C77D92FC02BC093221E82E96046449A558A88D426B6C046E9A088FA433B3D504
EE78BE77AB036D3DF8249C4B1B0A47FD3D6EEC81FDB4F9D9095FE29374D1DF47
2DA46570BECF826278E938D44472C1F01883D05533EFBDACB6C76467D08DE0F7
AFE59C922443FC26FF50A7BE430CF34FDE904C436C52D290B24490304F778133
7A4EE5A9543978A3833636F8B33B0C66ED837176BEE6E6A8F6BC82893E477F54
3893AC88C956283FF7B7628DEDC30B2AA8E5846FA9259C25AAF35857B18A048D
E4026A91828A4C47A8648A567A89550FF4F0A8F1AFB3A1F7C06F564C86ADF67D
4754AAE8B5021D9EB12338ADB313F2604049D39F50717E4670442DBC451B029E
D37E2F899BD72C6EE765F2E8A29E13342CA7B1395A06C4003C93B7DBC13E8E66
984826F1301300FE37C74CE40030F1F349A85B3B6F37E3D2C3568B2F7CB63993
992815C81A7F567B7814B47E09C2B12838DF827ECE6D2B9F76A84492BF9B8D01
0255944700567530AACDF07B21263F7BC718B343821AD20575B7C1EB18CEE6EB
315CCD2A1B26325BB60D366F1F70596EE39E400A6F1749F4A3ED6D0A92C08E4B
79F8C713BC7E31E870020278C63BCDFF874A75714FD324FDD866414ED5F0DD20
2F502F6B1DEB7FCD05662D9807CC48EC8B8DE4224E190C7E8E4506AF80B17E08
2BC82917D167A542ED26CBE11FC726F481F71D601159B1763AF32F9F6D891583
183125C43E7F0DD106694E2A18A232D38AA3EDC2B4D7E24E2B18FA0D5A7BAAB8
2D3297C9CEDC20F96EBE8FDA806B70BC9271B58F35434A12E8F25CC476C3B27F
1FE515EB91C7FF331732E9DCC575ED942B90C7348788C43C68049EB787181E75
D8EEC99DE256698CFED6FAC85EA632F544082BBDC9B77C55B4D4E68066D9BF3F
CC1457887F3881C8F1E9A6F048078B9A79E0B93DC06D191D62DA31D6CD94A54C
C5CE59292C6E526F590056603DAACF67DDE0217905ED11DF349F54153281472B
A8FAB1E83BC884BDAD2E7864F2E521ADC7C069C46B465D1D8C696F299A0821E4
2C97CC50E6C4D6C1ABDAA045DA354337B2C25CCF3AF3E0E78A42FA0F970C9B27
AD6231D2195597150B847315C78C3871F7DF0D5B8BBD40BB58CE7CB4507ABF3F
1E973E8B4F3DAD7FA872B15FAAAB32CF71A03FA57080AE5C40688DCAF754A276
F0A1DE4CA0F31C90A346C4D818EC74D494FA998849663CC0B9F3706140FD4F5D
DF23DD01D9790B3DDC26D18661BEFA2DD3A8557FF148B2CDA2B90CB5884440F4
64CD57295728ACE49B92C7A013C8F18B2F59A440D1EB1FCA7CE575BC41EABABD
240FB7E694DCFE132CC1F6E0EAE7BB26824CCDBC3E5A458DFCAF52515D04608A
497AEE74B4003FEAB5302E44DC287DAE5C2DBBCA73CAF31025A3FD47B8B3105B
B434C53EEDB7645170A6A6B6C1A85D0058926158D7128D6EB7FBCCCA5B71D392
6A5888D4EE45DEBA1EEAB80E257EA13BAB3751E9579C8219DD72D005EB5AF605
812FDC02D7FE33CBFBEB8307FA762111A1C05077AF91D8AA56B429E334610A08
6977052B17A032626772388126D47A517CC04E27182EBC4DAFD078E2C58CAF3E
801A77D13332A0F08DC7B007337B680C9E0CF3E5440B37DFEEFFE9A0DFE6A7B7
2430D7DECEBFE8D18792D44F39EC6B9786DEA18A90251F8BE10CC00A480EB1FB
57CB36234C9E44F65E0CEA3F10C0B38F0F033C7B92DAE7C12F2BCCD8C5AF13D5
7C3164763BB0D9368246A81F791E89F12D59B441F14796F1EDE6041ABA9018A3
6364CE91AA02E70D7589A5CB1C34B70A65BC238AF4A8E0F7466729AAF34CEB4C
C6B6717E8B794AB2DBFDDF3A89648C906439AD501289E8B80209D1347529714C
5C6182FC4CD1BAB40A096FB5BF4D15A945E047E5D444BA9F89D55B5133EFCC4A
E9757442444B13B230A951284C09101C02EF689C8EDAEA1C1645AC6E7664C434
AB0DA3DA27E7A6FC13C4EEF5544F2F6C38F1786DB3C9DE2BD6CA02D74451FDF6
14A2C1569268606D6A522632D872DCE712646297F9DBBF3DFFF2414ACE57162F
9F96CED4305F6E30A982C30AAA364292045C0A486BB5871AD692296D2D69F6CF
1E9FE7294C39587BE5AE2347C835DC00E5A73E95668DD04848241F5FCFC898D7
07553AA90560AA32BFC1FB1353D8E1DCBAB0216EA14DDE19D11D1B13D0D488BD
B61EE45F28817147D8218353614511C94D025DFD9425EEF795DD08E670A5EA49
5069A1DDF11DC589D2E91C1514C2799C52471DC6936745358526E6669DEAA748
A386E73F27E40E330E9B6FA5B8477E9788C5245492BAF032951F69E7155DBA19
8903BEE40A9F1FEE2CE3375D67D77D11B92C05C0769079E9EA4FE64EA87FD6E6
4BBA672C3E6A26B4F193DA4C9571982039742230A411A843F1A39E0E690272AB
F3052ADB2122FB8822F3A8CF410007FE6521EFADFBC17CCCCA5D312E8E0B4078
AC809300807CFE4BF7CAB4B16CFC66AFB8F4EE72F16F4A83FD3B6F7C02C8ED05
882182FF593EBB477FB3B36FBECCDCAB62AF3DA89831F2E623AB471FA4444915
70EBF12F70F2863F9CBC2CE3E2E8CEAB8C3F498D0AE331A2DEF9D4E3C06BC4AD
F81328A8C303CDD10D18F3D2433B05EF6B1F64A14FAA7DFCBDE7EFF153A18BF0
292CD25EAE9A176C9151F9C4EC7FB50699392ABC25BAA1ABE59A48F46683AE92
7088B156AB6499A4DF574A6133A6099B5C0CE9BB9491D96675544E98053DF594
83088E0697E444F8698C55D537D25FB79FD56E17105A2469DC27876F40355440
28390706CF1AD9DBA0C7A4055D56B801F96254FE0E52E4700CC663CD9BDDEA3E
8050A97238F88827E75E2F51339FAD5776CBF85616EC9DCB0572AB667F33FE70
9E3DDBED5D26699EC49E293CA9085F57948854365B07403AAC955CA584ECA496
B4168B7CCB53A1D3201066F4FE8D02407177ABD6009B0A0A14F56ED1959BD60C
7F7F5BFAF8497205D4BD58997F3EB7E92A2386B678179EE7279BF20CFCFC7037
8F1AF1FB8C141457531E7E800C56BA3B85B8984CD86C91563D39DBD0C5CEA4CF
1BDE5E6F73EC07B3E7DE00EDEBB5F3F169805580F4EBFF87B92A0E4040F9F5A6
1B558BA3196A74967D677909BB797D55382CA53CBA27577BAA21A7F86D26258A
210A15C3EABF35EDE800133D57DCB87B3611F52DF100F64925BADF9785762549
30567A877E6D2F625BE41A41B4E83E09AD7127BF672DA7C5F38BB32439DE82D0
858691207C805D468655AD998EBABC0D7583C441D6375466FA0272B67393DCBD
86FE4CD039BB409F2CA37F85D67CB62F2FC7701D35CF7AD04BF3CA9B00D81142
387EB4A72707B9A2573E1AADF374AD12C745D2B6479FB1FB37A93751BC46076F
744765E7F0BBF33BFCB66E3DA20AD287EF4AF3D814A8D15FAA181326223F1670
8AA5581957F2D88406E17C302F2579C8B6DB6B6AA4EEEE18BCCD2B03054B14FE
C8E2F13664651410C7F794E988F4E0E7C56C939F5B0CDE75CA5A4C7AA60064A9
06628B7DEF56151E44FC35335134B4B3FE85018D4B2D73FFD3C5603D332FACBE
E9AAD86F591EDF9887A49665E00F71D26E5EE400662259AB0CCC3039015EC177
9C2355BF6FC07117F41EA0EDB3152C05C1491F0BA017FCC08526E24658F4C056
E3A578589BC70797587D2F16EBD86592DFE4377D125DFA10ED4C3D77B33532EC
1E6DD8A4E48E10D9819841DA5A0CA130671BA762D2B8AB364C308B73EBF4DC5A
0613F7B8DBA2E2A7B16E9BD6C4BE8DB46304A1E11641D4641F787A890522C658
3A961C2C90516FBCB615B8DE37F19D29F78C7DA3F23669BDAA49BD72F0EE2A1B
A300817D2937F5FB8DA565B6DF14356DB4EE56DEAC66800B60B44F6CA7E6B8D9
CF508231B3F4008E5944AAEA983C91947ADF5174BD0E23A97467F05E9D7E930D
A726063471AA2C4A1726D1980224FC37B4B2187C9B9F8B724CEFA339E5CCB402
A8917EE8738EEB4E9FA64DEC59CC19A23E870B454414CAA85AECFBB1A44930E8
1C1A869D6C7702897E1E0009A2A5B792FD02777F7114C7D1A273D3649869BEF6
53B0FF24B544975936D7DB2B94C59C3E02E2F969602AE5803D9E1E2C90CAF205
BA80B539C5C2AC75C010466C603D83A47EE6DBA61DEC15BDEE72ED63DD09776C
B280E1F581E4E9F5ABB1127D940F5219AEF089944DB0B058EED809BB46C98A4D
BE780A5C0FB8430A5C6010E2808C897A398B870FED2DBC6234D9394A084AC505
27B9A678D31A2FBD78E0D3ED7466821B85505B06490AF94D2C001753FBE2987C
90B5513F5C23639AF5C05AB13DF5364B50B97974260DDC712CCA35CD737855CC
F8772717ABC0C693B34800F493F2F881C5BBF2D7E5E772260FB925429E910A9E
196228B234421DAB913753B66A37A14E9E2987F1D449E9150114E60AD650A1D0
9D8AB8BABE8AD9F4335F07A0DF22F80502E677BA55B039AC69D10C5567B55572
12138BC5FB70F720ABDEF10398CDD4C26F4BD44E9FDE3E6BE8198D68FE3AF2CC
8C8B621E9EFE6D01A3F5E146342992C47CD4A3A260B447D52144916C4DFC6033
970B1DC32585EF904B481375706F76D3645033252945EF1DF425306734835890
D1473D3398BAC490900DDDCC606C5F10E90CD45F87C7CEEFC604D5A386682B01
E2A0631127877477780553105D53DF7AF74D9942E0591E9A9FA35A820C6BD214
DD187558FAD32A3252E2B04075CEF60ECE9A27739F70B2814E5E3B47CFDF9303
D4313BE9038CEFC41BA1728568FA79C773E3D1431A1540A96B2D1B5A90E836A7
FAC2125FC6247E4A7049D4EFA37699F4999A94BE8005C79657470E8AC0E156E8
6ACC09B480572BE8541F441B7B306C042D76129E0750F8AA1881B225E710464B
33CB8CA356545C939DC4A4A3E02AF79EFFE05FF4435C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-Bold
%!PS-AdobeFont-1.0: NimbusMonL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Bold) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-43 -278 681 871} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B892AD5E69ACACC6C1640EB
3067BFC64938F41636DB8831883BDDABC6777DEE17F2E84F1D530BC76F51C621
75EC6B727A82C193D1C0801AC492BBE281B46626BD21F2ADBBFD144793EF754A
EA5F1CDA3310E83D78A098160C66D6B0C68D4976898D9DC1A08D01740AC3E7F6
8D3CE0A7E109104248CB86318400BD82EF894EFD9C9456E97055286C144D3EFC
D2625110F1AE76241079BEC19939AC962E0BA813359C15B07C74D5E9868E2167
EA1199D21CA8827CDDF1BE8357261BD32E79FEA6BC475577C5F6848345BCE58D
F5435281572AE6B33B53607EBEE6F862D4C752AEE43C00CDBFD258C7765B1358
5D6165EE034E5815DE79CC26C4A720607BAFA6049710EE3782BC2CD84FE2473F
1335D20A3B6E9E8355AF36673CDBE63C27D4F0E183FEDAB10031B1EE33B9573A
2E1961B7C6BAA41F7C3EE707FE86071EDE5756A00D7B3BF0A21B7C3CF41093CD
66ECCCCC22F4534912CB900B08E69574B07F246305DCBC238780278AEB8C9E55
3D096A944EC7AA9F697F354AA137DF90A9547EFEC1CBD568CB999979F5AEC6AF
A84EDAEE1564D178541CF4631081781608FD38964257CF89B1C8E0120B3F6AF0
793597AD553CEE5CCCD5C4F09CB0B4E998E6E76243191AF7E93833D067833F0E
53670D7E996ED67CFE6699A6E3815932AD272AF4829C2EE08A30D3938C928D1C
E89AF71192EC1247CA233093AAFA54FFA58F4AAF3FE9C62302E598F4FF8CC32C
4D318391F7A36D0D8B416DD36D776B301425CBAF82D520141238781111A14CCE
7927E2AF21EF837558002539AAEB170FA7E7E37EFD447C37DB455D2F08533155
53F3C5C3BE4817680EFD0BA3A114DB6AABA6C4D0D57B09EF8BAAD463996718C1
9D155A62D7AE82EAE4C82760C594A6BA3C7EE4290F0D898BB3E404CCAA91FEA4
EAA2146AC6A23F6C5A8AAE834A0587D990024BBE8DE485C71B916AD96DD66792
A732A188E6A57C459EBBD7756CFD54770E2A8D81BD4618D916A30EC7084B2492
5F77AB14169547EEDFEFB6F03C7D5365CEF512DF194628D5FBEA6CF56D0F5346
B6B6C1DA1DD8D8321B88807B579BB6A0C8F69CD919E311B6ADE903B470F4E0A3
DD5015C6432452ECEC048DCD14814E47DEF4A53C5CA6FA9E91D8A28C719F9348
509C0E17D632F8CB3F7468BB0E7F7F6525C086DC7EFB997A60E059D3D4938489
23E60F7C67FA6AA8062594F122A48C54AA7C049859928A3DFC72752ACAD074AA
416C667FCD176DA4D7D31A9F6BE6F146D4A9DC78F419FAB7C9E6C74D40EA659C
24098088BEA26BF5A725FE56025D1FCF8465ED7103702AEF74973F6FB697E645
E902D65354A44F9AFBB3A238B7DA900CDF822A47616498009F58850F6F934F53
024260F7BD161E90596A2675C1FC8E89898025EA873936EB69BC17539AFB4E5E
6E11F46F5EC752BDC6A2EBC56A2E82E3C4D85A8C953D34045B3925F9B88CDE5F
A2B78E5652CA2B448242D6361DE89BD06EB28A3E1A31DB992E807F01F1EA184A
040227A0CFBADF5B6E4123196031705C8B89F0F7E115CCA1E77F2EC02FFCA16E
51B80A519D24B1E2A278771A4C2E920B0B254F0B2DBC4988686B65B808CFCC21
F32158D3CAFB4DC5964EC24364FAC4C11F2F85E0B9668E388E07A4B3B963C3E0
FB216D55D8DB84FB19A69C58842AF43D57F70718498FD85E7A99EAB7423DAA57
35CD35841D3591791B44B4BB9C9A3E9F43D0E7FC22784A0CACC2D10D2691E186
A948FF3FF121F7B9E3931CE65679819327AA7931C85629C30877B40378154BE7
1306FA3F81E297E7AEA353F541E65ED3CDED08694B261EEFA7E4AA3A5336ADD3
3204A9E3BA4FD9478EE041E81108B629E81060CE90ADF3FEE957603462E252A2
90029A43D2C713E325980C175D8C20994382EF981F83FE1FA0A1A4419AB592E0
C0708320E8D6C7DEF841B40F31107967746D5B3A5CC23BD0FFB24E73194A836A
B19ECB89B9DA9A93D028D28EFCB73500DFC2F74E15521D25E3923F0EED07FDB1
FBF66D0C4D01EFFBACF5A0B609037E464AB80316A44B5D596C6FD3CF8453AB02
4B3868C0DD77370B3A4C7B16C5FFC37C0E516FE10E5EE241DCC3777131865BE7
61841AF5E465E7A19DF3DE86B975605D286CDD3FAB8FD8D5711B886BB4F745DC
04A3BB886BB2FA71A4716FF440DBCEC1771089559C972F241B85C3465B3C551D
A0888924FA1231B4470B5A034CBA00791EE592FB4DAB538C280EC1695D85DB4B
8EB762BDA2CCDA2F5E5ADA62706D4AF095DE7334E31E8BAEF4799FF68EDBBA81
48EA7FE6C53B2E26E96B6F0556D49923D63173C465D725223EE84D389C417481
1E9E24F85A8B77DD6AE21621F9636F924EB918AA5E62E5A3504028501C9323ED
ACAF458E48B7C20CA00865892DFB085E6DA8115834CF091EB3A7E40316FF7A74
B59798A8AB7E8D07D3EBAA9985B1AFCD9F09D428AA79821303447C940325E2C4
030BF983F2A858182EFCF99114F384B2D69C75A42B74785FD6564B0C2F3B595C
9F8B8A3106AC80DB85CE66321E8093FF5CC9FE8D9AD16D04DE108727FD7C001F
C1CF69F17E9E3BF1E15EDCC29B7701969EE4D07BC78A1940E027E9A5005DF162
A28E497C231A0B0AACA7703313C13DF3E50EED85DAD3A70626B5C9CB7934B5B4
BEB3507B5B5DD834C67160287FDC43608E195E9E7B6B9451657AC0723C0DED70
25A4E8E09ADEFD471CD0F5AEAFC0B15FEA65ADA0703D3F8956FDC4CE39D274B6
C89A1D7FEAAE52BC1DED5C1A601BD2FED84DC3273A686DF2FAA0615532EAE59C
82A4B95D495FEEE13094C55279D18F5FC90B50FF3088027770565CE44093BA2E
CB46344523714CE9C02A06D93CA8594725A428B3D59483918B157CA4719B2B44
80B5E84069E3BBBD4C3B97E1E54D62049C3E64858FDEC0A2E08DB5A22F8AF55D
093AF2E3567278BCA1B75F439B211312359E5BB5D14B64DE244E3A916F3EFAD1
B4BF55BEEF99C426623AFE9034E573034979B6D0F7D62021E05D2622D30FB683
593A036F894A471939C3E3D1B577CDA4D8998FC3EB793647EEAB531A76DEDF92
FCA9AF51CF092D15E37E745F1478DF48659E20919F519EC7B7BED40A425D8D53
2C284799723DCC04CE3A194D0D05C3E8B2D8C63B4FCE2D86964B7DF30DB1230A
A9F267688977E29873F9600A094DC3C4B0CB7DE48870D04E719151DFAC85CB74
5676F87833CC5803627C6DD6BE7036805ACD94C2BD0401740C0E41DBEFE21209
DD13BB41187DB45EF620469675DDAD8976DE4CF47B93FC6CDFB54D7E47CB3133
6E00CAEBF6CB3BB923E06AC9A1A7A6880E34CAE2D347A1E935869BCBFDBA13C8
5B947E5F08482DA1202736A206E3FAC6D1E10EEEAC5B338AB828D1595D042851
8E4CAC8401AE35FB81732F9AC2970BA247AF9D9D1F4E0DA66F839C18E57784C7
97ECC668E1509C155A60647942304DCD7BC70FB8EB5DA767D9D930BC14BDACDF
5311EDE49E062B8293C5F2539F74A8BD81C715469699751009AF83779D54BB13
A0DB809E7D80C934A05682F0E1BADDC47808C86935DE0616EAFD70C14E69FF6C
1DB9F1EB7344D82410DF425C5E1F37426AD72CCB10424212EA9016A34634CF88
893EBF53D8D28A07235AA8C72B021754E2FFBC90A212D08F73B02789BD52E125
D5861D0184F4956DC918F40B7F6E7C89C98FCF2DABAC639B076F952840023FA2
AD72305F06A98717F44467BB48E132D42520D43A1E6E15528592A8524337BA7C
CCA008422C2D384E465C05BCB17AB6BB58335C597E8F0353B8A8D9C7C10B47A0
A1D42062CBD4935AEC61809B624F17CF54E631FF71037DA7C7F5400BF2CC61FE
A7763690987A724B9C68B6CAC4E3CD2D3855A81FF225461A812A2D4740939710
D2452AACF63BFCBA4DC57710168701353F847038BA4D418EBF37F3C0B6861BC8
5CE6B6ADF407E972BD5CF46386D69734E367E5036FD3CFCDF9E6D5D9766A0284
C771E2E081FE1D8B5ED4D04A90CB6A29924AA4F945050AFF55C397211BD2EF3D
479C600A99B55FA8765046FA7B919F465E26A99A7D4F18A5AB08006E8693649B
EB175F648C6B93E4B1185904DA8EACD66783CC9A778683B1452A6FAE8317FC66
B585FF145EF761025DCF4B4DD6F46C8B0046F2FA04BC7730386D1174CC7D3D57
BE846417B4E3AB988FFBBA9B64E0A2CD60D977156767514889141651A5DEA626
2FD54F422E7F9553C125F60DD81FD490832AEE5010AEB42AC994C4B96D4043EE
D3AF2F221FDCF6C10CD9682A64C59AB48E9137F103CF91B6684152C6FDC5D5E5
51B989AE583C5305D7D01E77B489C8AE581CE6668FB9ACCDFA2245364CCA1664
3A3E8C33D1B38B4B56A05BCF4D0E881031C10DE091BAB45EA926D705842DE204
F6FCFDA6BB3538EAD5C8185DB0CB99C009F039E3CDCC6B0F9481B5DE86D991E6
24AB1F986721C532DE74EC422D7CBAE78005C8BD017B134DD20BE7576B43654C
207F12B1FE9D0800C9DA440F8F4DF03E933241F8F05D06EF7BE0D60FD9962239
03C9A02FB3046AD2DA2A30960687F2DCF03E8EC3B3355440F87909F7F8D6183A
704F0E95633C6E65D6DC0C650D7C19E04557AA652BE6DFCC8B4432266F916449
07B3DBFFA6D3A542E3F22215AB3330C27510286E5ACF00C91578070A7FC3BD8C
B3CA9B27FF879DDDB8844397596B1F595AD8850575C436FBDE74955956C6797B
15A5E82BE468F5EE596AD5B76320B01C64CAD316ED13DF03C99757CAA452FAE4
6DCDAF88D2603A14CD058CA4994F6AD3FD139414F85423AB084443641C457998
548EC65BF4165EFBA2F265186D73C5275BC9E33C9A289C330D1DED8820975825
4B6D96C9E54D43688FBDF3B69456110B9A8BBC26D6F2C8B0E08715E459B3CF45
42133E0D4905607029A3A09C7581D00AE985EB11F3D28449AD86BFEA5B75F91C
F54EC7F7BC423D4CFDA468192595DCF966025EDCA4250420C861265D49261A0B
7801D982A431A9A6500919D6B59B708EFC51AA6BEE4379E25740BBF09E75BC54
DC6EB5ABE225E804C78942BF3F6288ACB222042CDF6F401F09886BF70E5F52A5
5D70C80D08F7B76EFF75B159B6BC4A9F6F72087934E0CEC33AFD8F4D4FA7567F
B09B57C8C4DD63BD2DD54C9D579E20A351016F61AD17776DBB576D8905AB2A81
CEC34D9BF40F4BC9748F5423ADD67C1631E60F3E687ED7D9A4A70F427460ECE5
F073B6F1F63A92B60163D42E603DF5ACF5641A21F7319AB813E2A1EADC39B8EB
7AEC1C33CC628096D62843999D71C5599F89C29824458186DF6558A7D3E26872
A5C2A3AB701369C9C627C4A31F0982334E79EE831B932DC90880BCB4BD955057
E2C94BD8F6B16BBDAD218AAE457BE71903E55F76FA4EC3273507A4528B22E5A0
0B34B1FA3CA123BAFFACB6AF74398500FB30DEF90918821961FF7FB9CDC8E876
28938D6D0D86F38133965004955A04BAAA7523628FE96F0F2BDC4FFD245B73AB
C49864B4CDDDE2DBAFA96610EAEE8DF917C1AF57B73F1E4CDD4912B365621B6D
A755D086577F94D0824572FEF07D7D11EF245C449566E8A288CEF42102D97AA9
9C041339B08DBB61437C8F60C40B91C8A71DEDD3240446A453A21BC55AD94DB2
E43189EA80EF13B485C7F159EF14EB10AA46ECB2A1F07A747A5B0DF3E14E8E23
93BFFC335C9094A9650C44A688683E452C30FA487900E0FA34737FE729E0358E
C413112E7BB5A690BB5B63497E941EADA448B849EC8EB85EC3E3223F9E340C65
E4065FCCC3F5D98ECD3DCC13EBA3049418E59C5418E19126BC1E2071131FFF47
E4533DA66CD991640317676CE104985CD093AC0BD5DFAC3AF0C425C270647B32
7C8CBC053803BCD3AE6368624B33BF71ED24A3FE3B2B5EC30B74FFABD0D0D684
92768C7F55E9952987100AFC0EC3430E2DF8B8F596612934B1A833E715BB50FC
7489227BA094BE0099760774555ACA3D34D93B16163FFBE3370F7D5A730BF1D7
F063A8419830FC907CDEC4ABDB74182B6012977628F1D04A4333374BD99B1EC6
251C49EBE855E56C004D436C27CC46EEF80FA1A05AB90D788643BDAF8D2169F8
749826284B5DB8E20690CAB98FCB242CB73EBC7198219241C0DA67E5BEC040A9
58B14BB3D7821510CA1B953A7B17D211E29E3F949F0338DB92FCC991DFF1F6C7
8AD791B4EDE291A7B3E3431CF3B7B5DA96D07E29B5D2B31251C60FDC2D95B554
E10166E063832CE329E5CBC75F0E4927B5D413A21080DCFDFED080F13E5F04E3
B5F49CC286751550CC13B3B6DD8F80E0FFF5A79D1CFCD78750C8F0E2D45F0CB6
3CA557B037EEEDF2AC2B22886B5C5BC98F38CD281C040714C328B831F1FF08C8
F7C11CC58C29ECAB193C45F75C84522AB7294F11F5D48A2CB11E2EE84BDA72BB
756191E47408B194F0C5A0A86232D1BDE91CFC17FF79588A0DBE8669A47636E6
12EC667E0390F9FEE4E81E152F9E1712A25EBCC360750585E508F30ADD840594
030B26907E5E4045ACCCA8F8162C84F23039CB4FF9EB8BF565CFC6665360F71E
F764906D8CFD05854D6F9C78BFAA8D12A21531E713B80CD03A5FF4FB3A567B3C
3A5E09A7D4D6CAA68988C7BDFA12A30C42E28E8A436F30764344CCF1B9E47D39
540E4B6477A00B8D3573BF1A66D0126713294E13C1A4571B8A9E6D98EE5FB4EE
1B6A3AECF2355935040FACB7C5406AE0ED2BF67BB78084A97B5E44A93B6B0DCA
844517E4C26D4AC0607D031F8CA09F7ED1832C9D936B3C6A19BF4958D18E2C80
9AE2A22530172DE8EB5AF20E8E1A79224C32ED1ACE9C30DAF711465800EE796E
730FF5947CF53AFD3E0B43FB1AB87AA6F81A27199E7BCD10A4504E3249C21700
EBF8A95D05DAAE24A6D4C38AC99E4022E675866C6F0680C81ED0B434E3E198FB
043DE8B4965B3C0E011150D657CE71AFBBE23991CA91ABEC56F24AF4D625F8D1
1C660C1A431F6086B84BDFAB81950EB99E2634C84122409CB8A9F8E33EE50FF1
7536235FE2235FCCD2D853CB4E92EC5D767B21C7FCA73087470FC387D83D39E4
F3200FF400A6F379BF2938ED09C792AE74C93FD3585821648A371CAFA716528C
A056020137FA8E285DE68E31A975E9C608E246353F4535DAF9EC6E49D0E8BBD5
8CE646F07B9A390546C36E7D456DE7E118A07FCA61DDD72F563C92EE49E00C5C
08BB0022DBE864597A27AAEC2FE7E726794ABCB6FA1AFD4488BDD8420B809AD3
23B545C2163613C7B70463321622F6BED42AD784E9B7A44493E360460412C81D
0846736F0649DCA8FCBF08A404F279165AB3F64DE9E80C0ADB21ADD88C9A5A53
8A6D3EB969ABDDDAF67BF544EA30552A9951E118E95B6618228D66F71FA63AD1
5B99B6A65400ACF46AAC9601E4CF7512308300B3D572C4726AD18E09BF3BEC6F
92C021DC9D81855E01FE7A2EF6D8E88AB8BC49936107AAC792A2DADBA72FA866
319EA0A951545DEA92A43B39927AAA1FB29FD6A434FDB4CA78E48277E773570B
00C6CD69F9728A6CFA7364C1CB9000FEDFD15A1DA56DE8EF2260814A6C4DE292
25B92F534F7BED225D2449763DC266A39E858C0BAF7076B79633F5D60D4A2BCC
328502A03296DA6DE6D92B530DAA81A11677134B91FACBCCF925EABD74CCA2B9
BFB12367A9D97FC4EFB2BEC259456D1E1FA514B76827D3692785876EA24B0069
2647EB8F650C8A357C443D63ECC3BE5E6DA683C0C421C293902F9B1C6749D40D
85C21A84976997F291D6FB2EF1170F55FD793044216E76218C0B9E2F48811CFB
FF44D347ADFE133D0BF4607C4A4FF085009ECC7C83C07E7E415CF8EDC113F65C
88DD3489FA12BA2579B560A3650FDBBD2D50BA38D39259B0B3FF29D9982569AF
B8C0781A9B1E70E55075166A88143BD8549C3A532A3400352AE875AFD999A283
A870B3235762682494A74167FA0667F95ACA270397F3C699FD557D7EF6B0F57E
008FF89F312BE6F898AFEA01C56185D5B9515FF2D8FF65DC9DB6BBDF048A25DE
D9F9337DA0F62C041705F4D6D80DCE0A5104146C07AE4434AA09AB585990CAFF
A5B4BBE3A683736BEBC7AACB774FDB9BDBF381559B3345108BF0E4B674972C54
3BB0136D388C5D0876DC845D6CF86E7BC9905B9E82D6BDD5715DC3638E1B56A1
50F2AA9CB66AE05A30CC1AB228FD43A3879599B74F14E4F03E075ED0DED696B1
369E53D2383A64086E83502BE4F93CCE7569202FA531C078398F05DB92D2119F
AB3643DF79C5A539662E5FD29AB9F24E784F3E44C521E29F408B008665D8C333
D673E7EC2493FB50EEC4EA3F89CBE268E05C3957E64DA9B5B3D60066668B3CE3
ABDBF66F8DE6F32A3A3E6C3093F4DF36615853A079652A4F6657C44A3AEDE966
E1CD647E18FB5D3EE10090FA4BC9B725D10F0BFCDCDB0841546A0C89466A337D
298996C0CC15CB16E3B9E41CA339BA2A794FD85038C5F5EC791825BF88BB5BAC
BF741A272DCBBB8B9997AC2CE209214B596EDEE30A63243E9F7DBEF6819B06E8
E8977C380C5ECB9747D3EA8450013646C3DCF1AA12FF0CFC881E3F16ED2D6A10
871F870E169C3AF89DD1769604DBC7BB6DFA4D9B64B74E0CC41F38CE9B25CD64
E26B572D7F411B6B15BEC2E12492D29C7BCDACC4275257FA3734FAB1FE7FD487
EBCCED512A4C487B019836C18C0BE086452F2CABB75360653CC801FB0DAD118F
62EF5B8AAC1F482AFB3FE95AD97A06AA9C2B91115304A7C6375CA962BFFF57F6
D19074867A73C158C840AC96794D099CA0E411ABA99F5C6EBD2FF9E9DD5E5D70
812CE859DE7B0ACADFFC353781D5A0F250D7DC070E901E3B1CD2AD25A3BAE28D
FB2482810863C8F708BA0667EF025FC00DC96786ABCE380172C88DF3419DDCF3
C2B451E6F23DA6644EC087D61BD7F5FAFC0A41654044CB6F38F3E818114A0472
D480A3142BAF98E877DE36B4A5D68B01C3DE7D139637750461C7A6A60DA0E856
FA0D1FADD5CF720D3B993020496262F35ECFCD8F326C003ECB3D0712D609B14C
D37216483B4CB483C8882B9DE226C37BA3953ED42446464333DA07
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWBookmanL-DemiBold
%!PS-AdobeFont-1.0: URWBookmanL-DemiBold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Bookman L Demi Bold) readonly def
/FamilyName (URW Bookman L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -125 def
/UnderlineThickness 60 def
end readonly def
/FontName /URWBookmanL-DemiBold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-194 -306 1346 927} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A56504B55118A922E0D5D2A26C184
55BBBED334F36F1310DB3740FDF9F2132281D9589693E0AABB1A9E78E941CA4C
ECDCC50E62DC9E6DE2C5438F3B175CF4F7D89CB57A03BA348A95622ABD0996E5
C2D75DD2589435FA7959AF83991FA3CEA0DDAA85E1CFEC5152CF55EDAC4E0FD4
D8819F51A1CD6F3AD51E504A8D36EFFB5854F23C297561FBB5BB1C7B7B8846C9
489BA4386AB16EBAF4D53C8978138CEF92758D94F57458EA102EA979961B47B3
32E09A90214C843EED42F5CA7D375A88E0B9C54A921DA9BA5B342547D9EB01A5
83C0D4FBBA817A0849924887BCE76AE98969E0502F0531E597CC7514CBCBD689
89733680E903EA8D50C8B02334F8F426C19F0CE82A6BEA009F97A1A09C356F7F
2C9BAC22E5E4BEDB7CE4D23EBC4715F459FDC7CCDB17E525FA076B1441370DD5
99213F21E54AC251171BD4819B546C04DFCAB53A54820D1454EF640946185EE2
CE66C679BE9AE3C5D1A1BEF3E38FC178DD5794D4DD7754C74E1233566457A5C5
69EA0E0747CA67BC18B6F06029B00FFE1C8E05ACAD4E73DBCF01DD02FB7DB2E8
0CC0B58BB5A4610CEA489748A516EC5D873A219C5F47D02E947B3D3758306662
71FA4845329E9BD319A64438E44583C879E373FED6530979FD07C859BBA7AB7E
08340804383B05FCFBD9BA59620EB803DFC7DDFB076E196B6049CFB4BCF94215
5FA41833775927A4931997A3F17FA5F7E316663534B217F572AA9AA7A89079C2
4971E7C652DAC3513D90D1CE3FB4726EB2C86246759F58B9C4280EF94CAAC274
42EDF7D1C5477692EFAFC728A3918E00A603D993ED50A2346B31406F06115E54
C7ABB86118660BA7228578F1BC981F000898EDA4A9FA587734027A3C5F9B2A54
F29D7559CE0412A694399F2FEDDDC8A79903E1A12F5BC6C47401A623E1044255
254E0163C2F81626A99325476459B3CEC3C4A6D24F059B1541D8DFD9ECE71A01
1C768C3B651FC5FFCECF1AE13AB7D81EB9B65F34617F9449174DA0682E90D252
B022F1F97D61E8EBAA9CE2EA00CB6A7901711E3B866692D4DA73AEB6AF6058D1
34198F1F243AA925234CA7F2B6D9AC0C64CFB1ED88A64D1C43BBB187FC37B4DF
600B1126F59D266F3958D90475BA5BA53D7E6716F03F6822E60F7D87329DD900
586429DCD4AE629DBEA957B0384ED1BE5E26CE2B8F34353E0E13237411DECA1D
813CB686D82DB24539FB1B2643CAEF706175163347E0DBACEF378C23EDE4E245
C5F4C733F3D2EA6BA51A97C577246831A58FC99E7B93748B7B8EEF156D74E7F9
744BDCC912E8E54F3D2D2617888413888A023B8731F30A123D9773DF3D047F8C
04BFBD6CA1649C32D00F99B5045D4256080CCA4ED25EB096A304A6AB5BEEBB25
F619D672460D5BF2DAD4417253D5A83C29AD9700B3205A43B0C3F2D0269FB8FC
4E42821CE990C70BF1CABC23E8D3B4E3EE2573F7BE6E929B2825E7C73954E325
C8357FB3AE425BD27AF2B9E0DCBE335DF7E20158A2F605DE22AB04143ADB07A1
C14946CF32845E653DCFFD33709F23DE8F868BBA39A75A7BADBE7F6EA0D19119
5D156CA56E2EE2517AC0220C41D72A9F6CF08ED7BE67581630F002B3863A99CF
53172D2E1D8F21295F026D4C49D6F39100C86650A81C81847C0A16ABBF06FEAE
1AB340D59F4D95B79EF84074F350F57D7BBCEB864D481F345ECF4FD64EA16D63
0FDE18034C7E314A83705E9D91A2FBE40D45B43CE00941BF14B487F3261124DC
587C5DEF6FF091ED97A96DA52D9F6F8A810836BF68E7F1BFA4923BD8A18271C8
F80DE8DF508F3EAD9A57AB12A9A916D7EB1B0EBCB743ACA55B01C5E9A5ABF400
254311AF584C008BA19D607C5179BCBF3B1FE46D4BF402D864759BE81002EDE3
E49CB9193F4A9F02506DAA39886CAC4D93D6E6823E197EEC09D1BD84D00D951D
4CF9252A4443EECCAF1E56E5FBD7C545BC4D21C7EADB5AD309E2D327457D09F3
4BAF7397A07F5CB058FDFBACABB8859781A88518AD8F61BFB8ECC7F9128A17CD
447032B2B43479C9205AC5CFFA3F3C4177D0BDB06C9BF295AFF7D8BEA662E8F9
35DAC8CA80AF4B8BE0E2AF3DAA20E7B5338EF5C6C4C74F98F51DE058815D7DDF
756377660BE5BC079222D0C9BEEC63C70A82822C14A37CD2124F2BFD829C7560
78296DFB4072B654DDDA9A2B9B22842E5F5613410D134EE1CA5F16CB79051941
92B9EB6379D60E96376FE1F61EF4865326D572397BA2015057767BD78B47B45F
FF2804A3D613BE2BE5AFF0418B8AB84B9C06208CC99193C0BC0A9CA31018CDE5
7B254C935178E836E08ACAA4949499E455D87412DE4CDAA4CF812CE891CA0136
DB3635C8E749D11674C1813C234B6F9483BBDF2D563CD5E457811299C9B205F9
949AA7CC8396EECF1B2D3DC396761EAADCA57BE99E2DFDEDAAB90395C322D6AC
5EFB2AE20B81557F957432114F67A673A1696065D9D0287C2DCCAC3DBCD91F2C
04A9F6D6174F7090B9202B23382E40DC71DCC726CA57FA49CD614275A0F8C3A2
3247754DBA166BAB8F4BFE20CD51190E783A439C62E3102054068412621214D6
CC59FB6CDAFECC1CB0A36DFE6CC684A0EDA74B41A51B8B3930F8564F2EEB8C2F
D43F2C55668185AA03631141554C39C9D8F52122B8BBB73BDC31C477A7F1FC73
B49906DC25DE20BA1509641276A7D844B80249481CE38557F77795F73AA2A50E
A7671125D3AB854DDD7DC1FFFC25B63DB77AA2BF9BA6CB5818D759289A180A81
4C1F44698294362CB594A3D6D3FC83638BB6431E8A6A1988B04AA2EFBEF90646
CC106027953DEC7571234E77AFBB048698F183D2D3AB8E04A5839B9E375462B7
6DB6160F981BFACE17C47F6BA94EA2D83677D664E4E3097867ACFFA66718C51C
23813595FD34A98AA06258CC5D8B51699DA8F3433F14ECDF3C2D31CCE8C7BEAC
5E28DEB88DCF0127A3146C4FDE4597B7FF91733ACB5BB079C538EE56D63A6F85
4CC29B338A5E1BC14C9468B5528F5B5DC8BEADD7D4E3FB13343F286E505014A5
67733A950B86CD076C4670C92D7236CD1D199C612555168BCFE359EA94C94046
EF437AC7DCBB01FB85578979A7E06A9C108399FF07F99A68AD7AAE86F3E8F646
E7C56351F122EA80C5F097741E47D17C8524078C0361DB25062DFAA88907C43D
36DCE6065814B30F8E4F238F595D11230573426880411F772992CC43893291BD
837B509AFDC4132E8828693EFED0AE5B3214C7BA315899DA0E7719B933C698E8
7BE19CFA4327258B981D3BF10F0CCEF00A60CD1759BC9F72189F070BFC6A689C
27538DFCB9244D174FA5BDF587F94B4A01DBA28433C58090296502FB06A38617
8829921EC104AF6444F6FF65EC93C0091B975489D56258D1314FC8770E650388
639A4C6357BAE826E85FD55D69EFBB9EB44469BF5B3B2EAEB83C1017338F1FA8
2A0C847ADCC51883A302862362F532F31271B641A605BAC3EAC66872B076D805
E7C180F8DB7A8D6F86697D8CF398D80AD5ABE7FB2EA61D004F47CEFF0989B47E
34F5B6918F0DB2200B4C61EE6D978C720358CC99F698C52EDEA5D0E0C4163764
730F157E3885B8EBDC304AACCE6ED12C95E35E48F94FE2D25EAA50E844407C85
8861B780056C200194059EEF3A2AE24E20D28F37008484F27750EA1A82C4DF84
85DFB6D921B98CB793E7A05A46D8BE50A45C2316F0B0A51B5D52E9D6B33F4879
ADBF7D3D12E992F979D5BB314243A10DC3A53D9B953CFC1F8E84C9D83DC79843
4D36E6A8862E6822209085A9817A0F4BABB477B94FACFD9D615FF5608562153D
D6A09E462ADBE677E6F550F9392390CECD10A54A3281F18C9543719F90217B8F
ADECBFF0C24E8B871F85CE814DED94B3E01FB060B7E57DAA7134B08DEA1708E4
47E0C557FAD8D550A1F61EDF70A034AEC76C7E9268E3BDDC3449B8D34C34ADB1
30C00517221728CCB4CE026622467FF884E8E2F8AD18A785CA8D16741664098C
659BC8DF77FB4126F20D984F80EE209CC66F76352AB479FCBF344CE8B7BAECB3
F456D84E46C3AC57EC7C6C94F37E2097B0E17E0C86193C3041531EBEC7FB3CB4
AEC46642C6DE026ABA0F92C56F57F4857E21A90A0EF2713FBDB1B83E80DAF08E
9BD48143554829A4D876D918F6E1398BA3C4FC4A48AC6D85DE07A92BE0FBF5E8
7215497C249BBFAA44299EBB018D79EB75D08C14FD117BEB4C2BB0D83437D373
B223727FC4F1B0F8FD13BD9D19DBB962794CCECAA5994E06CF580742E50FD7AE
D054EEEB84AA01B575B37DD1D9B0D453E3A73EE7A34FEFA566F84663FFAADF91
6E228A077CB3F8ABE7FCF57A38E11430531CAA841028DCD2ACA3094563790CC2
2C491E0895FD7B7BB37C48B7CC48D99DC9AA79388C90BF6838DB500BBC0F9E15
2C30059054EE92951E4A202AB0392D250FB7ABE7D0D8CE90B7E1BF4C2BD3DC8A
877590A5CA7EDBB00B60E26CAD17086C48CEA3FF695D5DD96BC50B20EDB37953
452F6653DC4E88F2CF6E93EC785567D2BDEC73EC3B8308B94DAE1C20EC756F18
E2949C74A058EAFA86D92F51A0FA51044851E2269FFBDF5806D6A6AD7618A93D
C4A85C4076A95944ED748FFEE12F33586A69339B06C285601749955A3AC5F7C4
4E261E3C176C1A1502B45433C0BAAF6FBF423892149E5E3B3103F6B4CA4588D5
4384F23B370B325405A0003BACF5BCF7E7F41C39EC0DE9AA9AFA16DF1C5331C8
A54A7A1AC26C9DBA290833A9FD40638314FEC8EE5AB541061598C8472EDBF78F
DAD7535552445416F4B1A9859B833F74C574D4C38BBB4869162DE96A3B4AF01A
ED55DBBAFABC779078E7E79DE25C68A2110C807B8F43495524283F4864FC0D42
02372688BA830172D0204028E9D78D537B0DD86C7EE7EC89003789A5B24DFA23
E8A6709D6D41D439037EF07344CAF58AF3DF2FA53152D4918F4776C0D5C5254B
728A5EAA91AEE4E48A4C1F60D05D628F6AEA28488B259245D85BF26E9426E11D
62CCF76D449930CDC139E7D317BDAC61C6AAB7E89B267CDC4DA062E53D89242C
121E5A659909B376A6E3625E2493A98E4E653B589CCD87EB5F14C79238517E46
4B9E860D186F6D595AD78E571328DF2BA4DE83AC9D02811A89C12F6BB2FD2C64
F97AF2209A9F760CD1042D2B533ECF1EF2168513008BB3CDCE8EE707017B0051
75CA4F3CDD7CB1D87A11B6393F8133A84721DD3174B9E53BF531136A5EDF9192
965ACA98E06316C6087CF4CDB1811C0C2154306220A1212B1FF522DA51A06788
DD87665BF143F03485E11FFE1F67FB6D16A9FF1BC8E178BCCA13CF4B051873F5
F594C2B31CC6F3BB0DE20F744D2EC8A30EBA8D2661F510690C4BBD7B62ABE8B3
2B8660D2759970340F342E48FC8DA1BA1DDCE8489435A1D116CEC6657727EEA5
AEE64DC20E607F7F8FE3160E3A68C5B2F1EA996FE71CF6D1E942B3CFE8B0B5BF
7C93F1B7E133F3CE574A44A0C8B129DF2AF5E90DCD355962158491A8FD8AD2C7
F470E48D2C01ED59E41847A2C431ED3DEFC7267AD9DE87E23C2E02EF94D0D2D0
96B734CE3721C371C213B6AFA0E73211C8D5C8917C242C02A331EE280CECAEA7
FE970E5EE5F79FEEE1B30ED1EAA29FAA9DD9CB641E5BC06A2EA1BBBDC5326621
82AF7ACBE0F0F8390F9CC2E0FBC396E248268FBE788A4214863168A679D4FAD1
34E4DEAAB7FB0314FDF45F05106CB4E5E03072C214A0BC58C9E02092306B44A7
BDD35F63F42F7DA2FF8B2D1ADD30D02D53C583AC6A3611A50464C8D483C4B859
969032970306E58E62912AB8DC637CB1FD07EA3C9BC4B0BD83AD762482408DCD
7073EC3DFD0868FBCAFC4DE987F94EB41AF72BF013C829C26F9B88AC1D2CB88E
7C5A8B43DF3613AAADD9EE0BF676B6A56422F9DF70ACE845EFB8FF0B7426F1AF
1262EF81F6E740CA25CB103919C95EFB137C086A25169F58403C7B91B3AAE501
74E155BCC0C8C08882FFB61253C5BB79E44C3F2B223F22F9A39E7BBBFC5598B5
590125DF7C8C1ECE432F87D25177660A0D6043D9260507EA17F8681D1F2065CB
01270AD350CCD91F9AA3FAFF045425F0D1729C4A624E754AD9C658AF14023ED7
65D76A99AE4C398C125A93515D956D66024A912AB1528A780DABA8D9C5B425EC
8BA4590DD3555C2E4BB60197FBB23240EEAE95B0E97541FE06864484D6B2412C
467212C4B5EEE0CA9396F31557A70C454AA5E52FEDA68C46B8A633E82EDBE211
9E491E349071DA6B9116F88B058380709DBE14528BC41FBA861D3B5FD797EAB4
9C436E9E9382E2900FC4022612254F6171FC73D690739EAC49DBDBFE314F0404
E966C5AC3A2D955A41B04C49344B04B0FE4575C2E872BCF0A0EA4CF0DD9598A9
036B749049229902B646FE1ED0BF38A4D646078C22F4E1DE6BC649E716176A47
BA12AF4AF5B21954E4FA22C89124DADA58C9C8F52C1F0347BE809375826B436E
93EBA5F8980B544AD772F774D25CBB0C5CE966D6420407EDAAAB6A8F88ED447A
4930E63DCD309DB269C8C45294EEA4FE527971B578DE31E35D0312F6E32B536B
9E7B28D4555BFCFD2269F2EA7951B2B018165C43C1CB66437390772E97659215
86A3F80775CC1D909407C93E93450DB20022545CFE3285AFED281DC04C3FB835
58CDB54C18859EFB7DE81FC85B2D2B011D1947F0D4874D8A4066DEE2FB3675A4
7B77D953D9BBA0DFCEB57D1546977A4DB048A30F653C5FD6F6A3D5989FFF2B0C
CAEA89FCA9438FB0727F4289C6C81A1068A519F7A9A12CD260A45BFCCF09A785
047C45D5E796C37A7A374259F56F82F5AB17508A068C772DCE3FFCA546E9EA10
129884E1E1FA1F5B83BA3B69BC73E6E8EE9E1DA8F531F31364DB0C3A5301A28D
BC30091118017450A0A94591BFB8A14374157BFC3E612AFEFEA98F7BDC072377
DBEA6174095D90F900E7AA760770459389686565E23BE3285FC3D9A5CB52C1AF
56880C9901C16E712850309F03E653FE3058C8C71C80A17C909E4070B7567FD7
A515F62278D401675416C97B385C24BDD6B6C49D204A816438CDA3F1C2E09660
F85DF11C6CC87390BE142C11412DEEC2B65D2F79C211491E6AD8D0A0BE8ABE25
A9712EEA87276DD654D49B616D7B7D4C0494776D7991B97D2C102890B57218D8
2EC626C936209AAE5D9735BBF8799A87D44D42E28A8B6DDDB556D22D3BB57932
8E4AD9D5C3475B98F92D9744EEB176A33F6190EF3A270698F6B9230D29400F9F
26AFBC000D7B1351919FC871D136C88DDD048B72C709FA1C06F4539125427D7F
EC0715F84FA77D792AC225FA3C02AB73331EF4A9967D58AF7756377B506CB2A1
92D9F78B8B87EB23189AC378E3EAF19F0D5E9FF2BE866D0B6CCD0E5652B910AE
A4F0F35CF3D7507B22108B1B7D5BC4BE2EAC235BEDEE368C28B30728790B5A6B
063747D828E7A573E45ABDE8C783A0278A8DE53E7DE19C162DF268BF66A41F3B
3AB85760337EA52510ABF556D3AEA84463D7ED81A21C82EEDCEA0D02C0548083
4D324D26C28195A1F4C48AAECD3B4B0798DC4093C5502E91C00E08A66FB8204C
A45D24DF9C594A7E38CED6D538D9792F4FDB33E250C13AE29968067C6240D759
77119058A8DC482B878FAE15A3CC7B486108055DE521A1D99FF4CFA54CEBC571
31FA0B28BB4AF3926CBAE7F219A720BD8BCBF3698E2C5656FAEC8B5521ACB8D1
BDD0F480525CA8D04C4643577688FF0EEF8AB71E885C5543B4D7C02512F2C28F
2EC4F5BC72E036B94A3E3C22412B073696EF2D2E5A6DE689153883A715B0A01D
F8F876EDCCBFBE31D457A35DC1F74B9B30A1E414A10C45D7D28ECCA569A4344C
E49EDA5B101EEAF54F84382EE741E23D9BD4CE2D7E44C5CB9220F95B38296B3D
C8EA8340D26D1E24BFFFB31505C0313797A2C62016519BEF23B160A29C67BE36
6EA8B1EF39EC5CC133D14CAE714C8C139B7BC364C02481853C9963C1FDBE3250
BCD2280059D9963FF2C388F118806FAE032BC6AEF7C308F1EC77DC4ED68C27DD
879D5AAC9465AF4F8A7B6449A558A8CBC50FB4D549C37C3BE84530F821245002
735DEAA7C7DA2FF259834982AD654DC9305A074C4B612C648F16D268D0E8C544
8BE1E7FCEEAD8E290BE2A510F206952AEE5B4D45B4E785F35A407F4A7A069F64
B641F567F0B48BF5C8FC3BA4A7EA3C9404F25856EAB620D9380D5CDF92857477
60CAB18398026DBF21B8C8E253EC7C0371E9F2F8DA65E8559611D2F135A9CC96
6956166B9DA60D2A29C34AE6255BC7DC68889A36400B9CDE12BF942EF26AF65F
B8297CEE1A8C111BB379C6A32F421C7C5EC1577F6DF5266B1BEC700674AE61D4
47CC78EEEBF84FD146C9CA2327E3193874ED8131B860E2B27CD312CE28C1F0A7
BC2BDE2742AD7EAF0E054E02794E4CEB491A4556A769B9EED5E856312E6A3097
1F4B1F926893A997B6A09C36A90A7F807FCCCA5D312E8E0B4078AC809300807C
FE4BF7CAB4B65575FDCB5F12391781D1555E66E0D67549FBF0833C84A975E07B
866F2FE7FD3294F1669EA97B3BEEEBCC24F54557DB421D427E28CA6143F63B98
8D41D1A114387957DE2A5672CE8782DBEEFA4AE2AA4854CC0830FA31BF2D1703
EE06340147CF50C339D4C822A6BB64BD55409AB4FCFA30CDC79A4948911783DA
FAF0D033F855043BCC14BDC72E0FA5940999BB035541EB14D4EC5F9F67F6B3E6
8AE2749AAEF090617522DB89734031A9714988BA95EBB23AA280D3F52AA68B4A
BCA878BCB2709895C55C5102BE5CB9E89358AE82E7E98C97633BEB9BBEEA4190
277C5F4EDF6E19FADEDDC6376154D5A78EB53A3D6F726B492493E959A12F6B06
B8223991B3B026AB632EF0B4131003EBA047E0FA256A192BA240D1BC5F95F52E
2343BD682B759E731C1164328D3D72B0B327F655EBD72D8AFDD19DD60AA5C016
172C6715E29BCD69243DDF2790637E437581B58E4DE0A41C97B5DBB76C0DBC79
AAFC822ED08BDF9663B516608175CDC91853D0C2AC00CF7E5A09D88537F1E1B1
BB1E7D9E337A9BE327C83D41AB8E407F4DEEB43C976E64C24E8B2BB1C4188B7A
30DE453A38BFE3EEEECEF5EBEC93DA9D3C388212210A5917CE236D356F1181E9
D49336567AD43DCD668A38C0F4EC3510619779B00AF10F7A8980E69D0D1D2CDC
95B9F10B011176053EE1E3CFB2EB398C700948FADE7A9DC6C26A672205A95780
05EC9D323EC462EE9174B246FA9659CB87F1316ED281EC07AFB46D6AA6E0F2F8
D52F19D2817C4511A6CEDF6A64B4FF30EBC77611918AF9EC8E7B9A6F3A3BF662
B9EA110115A8E6776D276FF6A61EF3767DF1B09865557413B00EF9E6A667861B
707E5D2FFD4E0F8C5CFB2D7C0D2D16C18DE8E1EA219038396D6E3B31F2FE9099
0DE1115F248C8ED7FD0F0B0FF8A490CE8763BCB8BF4B90B0CA430CF1DB39BEC5
6D42DBF175D18D72D4E3923220E53C6287592E2E491B64A2755E669A0ADF7D28
9795BA53B7B5F0A588E1E086955C3A5E5D1724A15131DFDAC489CAB1E595094B
D211C565837DCB8FCCF7FF9DF5B1BC2E13055CAED61FF851067307FAB0ADB1E3
F235FEA295910569FE6DD5995512562359CC821E85A023934B35E2E80EB89F47
82D8F34A5DC8CEDCEDEDDC6EF42B2F0CA3130E229B74A3CF91E2599B2F6F443D
3FD2782865CE66370F16927135F55194B9F6A1679797B804F9A0BA0AB57A1760
0467ADC64D600AD4CB66D8C64E1ECC992C8DB9C7CE5414E5FED0B0BEF2B5C646
31867145D8B53FB0BF788FC6CCD3C8503663E537B7297452786C3B118A584DBD
875150EB9A6E9420FDF50A7DE0827C11A6BEBDB65521D0010402575DAFFF833C
4D59C194192C1CF99601FFC163B6191FC0B3D436935CC8EA8ADB3DCF2EF2DFAD
C728A2B46321949C4A0FAC85F211818B7E63E7206A96B530E0992F3E91EAFB51
032C05E7D425176956525E2C91A8525079B97D9FA6FE5B7DA4A2638139FF6CFB
09F35EA042B3B551F67D4F81FC0F0766E196C78749FEA58CAEBE7C450BBA192F
680BDF496A8D3BC5C33C7C2F9BF6893395C4224EB4174D294D0EA1CA35C66EDD
BBC19723A2CF351CD97D9AEDAE2F10DACF1B88468981BD98E5951AED115AE9D4
C6DABB42C2035536E8F7DDB2B96EF464630E2E55C20F500DCDE8D0D405027815
1B40CAC673C48B92BAC90417337835E3C30AE76637C38FF909D3643461C09049
8AA7064CD84DC256855A3DFCC82DB007D8989799DBB9A1D9170DEDF7EBCFCCDE
9CACC4E2794BFE8C78DDC6EDE1D9B9DA121C010A40A2D6798D2140F0083D9DFF
C0FBADB48A1BA53EB4EA39B674773F3D16D7A4AC96DBDBC749EEE1BE46253672
2E95FDB9471C675A12A81B73F370431FCB688D76C46A6ACC1EEF954A5E6B62B5
1C92E404CEF2949742FA5FE9A45790192B6EE7B37D178BD411F2BFB6B439DD79
71A216C793CBC09A29C40A1ABDF55DD8753D9791FF88C0DE48E791ABB66E18A2
DEBF8CDAAF3BBE285244BC9093523C75745D868D2FBB200B8F1EECD7EE168995
DD887304AFDDF88F35E1075E343CC8DC72AA738D8D63C9AA6143E2C3DE2DE946
2DF4721D85D58DE49400C283DAF19CCF88EA5CF990823B9E18C0BCFD552BF7F4
BDB32C50EFD34C4EF05B41BB5856B0FC7626D42E7B65AC7ADC46008D953CD802
D42AE0F2AD7CE0FEE3CAD755AC23964FB3A0FE97C127E38E1F390A0F59258E4C
768AC0134A614BFB94C297F9E5CA9E0A3E879CB5A38461B33987CD0A5FC97C0B
77660BAAE5F0257A53249617F3F4D9F5729FC7C2509021179B71CFC7CF7E3874
14E4A017F9FAE43F47C36E5544A533F2D869729A22714A5F0E7DB43CE31215A0
DEACBB95D2D4239C57FE699CD9F0CABEEAEFA2A97D02C82012C31653DD26F745
E1D1897D334FD59840C5A257D0849702409F579BD4CBBDF2276A4F74DE4D6BB8
F341FBA213031626E351CD2348264F5277BC5EF11B01A588399B10AA8C9B5A7E
E4C1FF02C1A7A7003B478855D76CD3E8D71ECD5986974F9E45AE5468512B4A9C
E1AD5E5C3456BD6005A74FA74223040E2FE950F9C93659FDCEEB82C9E71E25CF
51D3CD318F065A9D95FCFED1AC343C31DEF9D536617D22329EBF716CA77729C6
AAEFD8E6ED3CB145D33D4987D800FF2403F3A9C6A02B03E13DB99D69CFA122B3
3474D602FB6D02F57F18066ED53549CF9E7C3EF7551F02AB7B9534E2D2508337
38DEEFE1A56B940E651E344DD35A0D801EAB3A54B90340EE129822028061F5D0
EC7808DDED57631ED27445862484D58C78EDF6C2650F596FFC90C3B358537D4D
860FB53A39AA12B1CFFCCB60148FA3B00C9278BB0428971CC9818FC947D89753
01E531281CD40D1C98764EF3528591EE06C1A0E5BE179E3D071DAFB57C3C1FDB
9EDAD6982C8056926EB0C8FFF1639C412C602E1DC0E7336848E3194FFD95BBCF
244C463EFB6F6263EA7B9A9264894EE1618ED536CB685FD9EB663259B69D9A37
A28B84BEF2447255A99CCE4EC08AABBD710DCF18188AD6495A7A0E2068ECD44C
DACD281F863683A1ACFD71C1FFE7030E1204985CEB2D02904BC01944014D9C24
82405EF270A816607FB0F50B9F2016D148A0F6F506E5F074D744A452A290917B
293DDCAEE45BB20CD69AFCE857C60E1F58EB1D0798BFCF05A1191D9313D35F87
E6E911407C22DA1EF4EB1250BDCECB6776D58E021EE54102D7540A40B3B362AA
3B778CD3D5CF3AC36F781B587D21C7C67644FB6BD7AEBCB181E95A05CE32BFF3
DBC707465D3C4B5253009D5D45CE4BCEF6BA93DEAF2197B4CBC156A38BB6C665
2FECF217F5661DEBDA269AF6C592B519BF04BFE450452CCC9F13A8E0D022BAA2
9FE93F719749E52A1648F7B07971865686285618C0CF4108726775BBCB998268
982138D57E2795994572D00D7F657A3E8BB6614CCC050589B11F218E4AA370A9
92CFC6D4C97846379938EBD7C2C8870C6154992CD95E95601049B03FFA7780EE
55CF706D23AE11FEDDBD9399259DE8499833AB4CD90AEA953E8D063A8913D176
CB480E935F41932DB56000A3A7E56BE016A264E7B739C4088A89A9C21640B2B0
73A289A98B91308502B500671093EE63F9E750C7790D7A3AC71BC41D48C10C6B
E7C2E9E9B685FCBD1059402061B18C41EA0413C7758C7614F09F8690420FD24B
C0FCFC6F06A23E1DE00392983EAD34EB6CE9585C53EBE4D24FEF6DCC38C45FB3
7762C2F4DA73D29D46EB349711A01C443F7406F4684DCAD112F541968FA6825D
18D3F5FA1C713F64424F2CC3BAC7F2F943F648DEB0FC94009BFCC87312BF1A2A
F566EE370023F0C91496725F3DA14CBE3413FB84F35B3C00B79638E53A762207
04BBEAF881AD41F5970D9F08B18FB1DD2B545FF4B99312F96FC92ED69C8C2119
DAE904662DDFC99665649FCF5B2D84985090CA16E78BA57E39893D5C6BCC73E6
476BDA2918BBC34B4262B376C272423F4854370E8EEAEDD0B7F3691620E2AA66
C73225C3EA0D58A28D4B2B2E901E0D5EA40C2AD592DDBCA20B32B643875E56C5
DA031AE9A08C333007A6EC0AF97516BBDD501F89A812B7B26F47A768978ADF18
4654E9AD2620EB7A86CBF7B5585552072D831A7163CB01D77E191394108577B3
7D2E8D1E73B62E0628AAB4E09760F35415182A92AE684E902B360686E2240942
CED989047A7EF6EABCFF6AF8E52B08F7B8CB0021F6FF6CE5A7D1B40B3B8F4760
1FC7425B6E67C3CDB6CE664C0C247E7A22FDF4365B467E62C82A0157586908EA
719997349E222AC45DFB1C3AF1FFD3A6568289705CBDE6F2B25F4D693E322B38
60AEE7607B2E6BE89DDB3E0709EC59861C9C7DC2B1D7079AC423513339AD7F5B
1973FAB3ACF055B17935716DC0E3D31352893357D9AE898B382514456D6EC34C
A6F32920DFB2BBB2E5A5B314E9586522593B10B91024FAF6AA7CFE633C28A2F1
42B8ACEE71B4910E2E4E99587E052D39E8EF225BE42F1E67D67B2AEC5F071D11
EB735307F436EBC5A59104F7585303C397728971D27ECD5B2FD5920D8594118F
F519D70DA44CA3EC0E4AB8C235FE74F41D9CA91D1722A6F4495A26F9B6F725C2
3887C6614D70BE4F008D2A093EF6DF3004C08081B04DA482AF12A69315335446
2691D8EC7F4BEA7BF48FD53BBDC11F14D9890A14C91A82C58DBC18C3C91B0DEC
C321423DCBF47846DB3EC010A429AFF0FFCB114F6920D7671AD67A031D8C4504
CAD45D6733244F92387CF8DAE009C0C5CD23E5FBE63D8035F25E6B2335160A67
2B5F70AE3714D49E017DA97A60BA3B26E7B14C181454004F18A34857DCE3E5F8
BB389EE0AC4EF0F0091C77B485F752E9E182FBD6873046F14E850D91BE8D6532
74DEBAFF0C1F5BA4DF5D397F5762C233E29EF3FBBC36324E1AE948C60629062E
BAD3899E2F58752DD0E8C09AAC2265A55437E3A174FC7577717AA175432F09A7
0FFDC1F7700BE6D78DD60DE672B7B708A63D26C6CDDEA58E0A9F34061DB88FE0
811C524F8709E32050DAB78CFA1FA47D880394E7ABEBD5FA99808F918D5EE45C
44DECD2D22523DF3F16802FBDE98C3DD2E96188089795196C5E0C725BA134C4A
FFD67ADEA36CE3898CB00B821E05B75069A97E3408853C5C81ED05E2CF25ACCD
49231B7F4D0EF093FC0A9263B5765C778454EAD1B0AEEAD3C3818A207AB13175
4FFFFBF15BA5B121F54F6F7A7B8E72658E5C8E1C9388867DA6D7638CA62D5240
6B58108F950088CF1C3ABE825ABC17708E52B27231CABC6A4165DE6C274A75F1
3C56E588A2E54F66E8C211DDF782FCB56BE17BD65B80885F9C35FA4B982B43AD
3C8E023900FA557CBDFA1814AEDBEABEB481FB514A93E13CD6B989A6413175A1
A2CFD22C95CDDFE1F907E546862889225CD6B3138C998F06E1F392FE5D880CF9
BC5299A5D04DA3750CE5B642E5C2032DCED71A8A89A6E71C7957A90F1F0CB2DD
E817053BA1BF993127A8092BB709FCF1D2F4B5D65010927C2FCC8F188CE9D77F
7249DD736906220619322040E727E9A5005DF162A2726F6C9B507A3859C10AE2
A49A55F7F78B0A536808071B57351EF419DB64270EAA432100A554C283EA5683
F219ED211CE0980B657738C8CE2B37198F4333E612E778487CC9FB79325A7465
2219B8A4848056D70F6101A3BD0D2D5EEDF29BE33064B26F1140411B7B5C61E7
2F975F174D3584923CD4CBD5404FB795EC4D085715B1AD64872B4C6D9E2DA1A3
1700F72E7A46F93F47A98ED5C6F5C92BA680DC1257EAED5DD2C1F9C736CF184B
EA80E9A9FCB62839A55BA2940E3FC850AC31D5BD215C79CAF40FC922A151933D
B8FDE931DBCD73BF4CDEE9E335A8CDAA6D5EF47430C3AF74379B8179A15D7F49
BCA4F02551A8E20A3CC1BD8C859458C3A0A29856D6946672183D6008FAB4576C
025A118DE26D1A1F383A953008733685194C3119D8F498686CD001F98F296D98
CE4222CF07E4456CC3246812D76EB13F5477CB2DADA833BC47B240978F5EB698
ADA9337444BECCB86ED4981344213EF0A86A5E43E5B649E2609E7762840B4590
A7BA72B153CD85E897AC014B08AE93B791AA215B7BC2E5D1A6CD941F319F2A58
51B98060FE3BAD0D4C54BC1CA4327350B453775575B9852B9204F05C532067D1
8F2FAAF4A9DCA1186E04DD58170DE95C58808055B796B5F83F80FBF50A9F7F0B
F094067A595DD614847C0B8AF34C1ECC18496211C865E900056B59231AFC2B0A
6F5BDF6C6550211D8E642A232494F1793ECD2FF8374924E50F6E7FEA54F92E8C
7B0571768DDAB0CD21D3C7C46008A60837BFAEFE37C0CC87E2229AD3E1F5AC7A
4AA471097D9D564D9A6837B2D5B55DE862FEAB098BA51194E515F18B3C868B1C
E8137EC1163670652D26BEC1427E0A546E58DACBBBB7F256962EEC028EF3B21A
C154780C9D2F36514C003D27B7BCA9ECDB57FFFFBC8E643A0C6A6DFFC0401D2B
B1F45CCC3D6D4ED8E6F3DEF0AF2F5B67573891636ABD34B6821BF260AF162CC1
377364D3E7346B79DDF43A4D4942134A2F2BC8E3CA6EECFDBE43DA3C78F01071
4F1C5D3652996E6D723CEB237034D238B7078593A5ADAB55F9AF0BE973AF60EC
3905BC7564F5AFE3E72FEFDB3C3514F4A2EDA615C8ED070684D354985D1DED29
E1B76FFBB8184D008BFC9732C5789A54C49E130F286F85DD81DFB2F5682EFC1E
C2227455D93C19FC2270B0EEE1A1176DD3911BBA358C10B313796374F1360C46
EEC19A68F569D9BF2597E379D1692ADB803707C95391880BEDE4DD66A147A633
22BB35CDAD2B7DAE17E9ED8A205E7D6CB2F76DB4A8008EA2F9D2F934F5F62EC1
C3D1FB88D89E40E6B786DEF81174A3397056BA659D3C9C2D7AC1125560F14F1A
3CC265A5B7F41D91559406099B01323104ACA3C7F36CC29BD7289FE0BCF28952
3A0EA955A8D7CB1902B5C55BB8009807F356C660BAA4F7861E2F1E5BD0ECF50E
CF30859115A64681E3F9A2A35D5E9137A265FA6E5FD21BC5803B30E60A46EB9B
5396392BC1586005F5213D73F94D438484D02F24
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWBookmanL-DemiBoldItal
%!PS-AdobeFont-1.0: URWBookmanL-DemiBoldItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Bookman L Demi Bold Italic) readonly def
/FamilyName (URW Bookman L) readonly def
/Weight (Bold) readonly def
/ItalicAngle -10.3 def
/isFixedPitch false def
/UnderlinePosition -125 def
/UnderlineThickness 60 def
end readonly def
/FontName /URWBookmanL-DemiBoldItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-231 -332 1333 927} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A56504B5A1D7B2E9511A92BBFD333
F34F50FA1313533E45E9BAECEFEF1D0AC80CB12D4E65BE46DA6E1745EDA29914
C1B90E2E400569A3D4112DFD98B8DC40013CDE8B8D08818A1C03EDCAFBF14CFD
FD4015882C02136A91689133AD93BAABF831900EE269B2ED281519D9FD17F2AE
9447D437601CEBFEAFE36EF7B8A60535D9073114789B8B92CBF71B2C998794ED
6846EC12DA5D12A20543D64FF047D4D0C4C3B7E92B086A093137559FEC0320C6
97623765588CCF1E0198753D30299E70E896B521E277E26D8E923EBB1826B702
B803F027858316144C1BA4A8AA8F7FBD131A06EB1BE6DD47D00FA2137852F3A9
23B0B40DDB75B49C80D60C7E24837F85BF1DC6655B8AFFA379E61EFACDD6D05A
8A40AC77E5F0F495C5036E9CA51A056BB87F8D2E770B24855E299D92F1B17B4F
1883B41EF8BF6D05726496174322CF1A195A130CD339E46BFE53B8C585C6F6A4
F1F835580AEC94768FD0A0D9A978A8A9C9087921B1773CE8492118F38CCE22F1
FD8C6D43F4D2FDCDF0345A94F975DEB05C71C22D8299AAB8DC6D410564910AC4
5C8ECF84489C8DB36C86275DE324B8766B4B3765DB6DF53D5702A47777A80436
7BE887A06E848E2C2F7C19AFBBFD2DA20CF670BAC24AABAE22829B84ABFE1653
71DCB6CA3A5D4B414B0DDD9D99A26D4735C7168C960B115F92751DDBA8E90CAF
D0811EBA0CB1676B8E65E0731B0EB20735C0316645AA74640F8C636578F4C5EB
8443F20DBBB187E80F3D6F1E4535FC2D4F37E3B4A3ED23F5993BA83F67ADBB3F
0CFEBFD00BCBFA5A93E99A3D913995DAF23C1ED6B9DF867607D38E846A567342
14F0A5BA1E8B29BB461818743B255212B0B5ACCF20305E61007DC862FC56404C
6F7E3A54607C6FAB89ADC08275C8DA577F8887E7D880DA6E737184185087DA85
3DC261F1E3BA3642F7E4CCD21893405C666EA76B85DE80BDF626E9FEB0B277D7
3B3306AF739F61ECE9E0F528DB8DDDEC792C2392B11D222E61CCC0992B66DAF1
9377BB3B0322A4E259A6A165EF6F7BFF069F64F4DF4A85D3DA2FF46E18D63CF4
6DACB9CA03AA5F701B6F80BBCDF2AA22D747B1608852BD9B788235AA0847B7E9
A4E1D5C3FED9F2798B3E46244F0115F1CFD27B102E3AB251EB9FD654EF711D68
CD9170013E67ABCF1213750F1805F36844DD045D6052894C5915607E3BD7DCA5
4D8D3A8018FA7EFB37AE8D53E4AF5C978EE11BF9366866BEEFBA4C05B524702B
8A8B07AC946D02E3B7D57D8AEB1912A672D2C3C67E71D8BE2B10FC97D8134214
DA14DB440C501D46E821750FAFBA1CF306101C7D563C43EC5BF4B257A56C5183
48D27E0C312082BB785A7A71D78C8F9B935DD1741B08DF798524E8DA87AA538D
0397C4F066C4D6E151ACA5B821C74BE4A19E86229BFCBB7BC96B0EC02B042F79
E7688002FD01D97BF158A672464F422069E65809B7A1A57F9CC512BDC51EF254
96B3906C4E0310DF2D64F17FA59D0ABEFA11CE987CCD0A991377B26AC761B1A9
38DB70C841821BEFA38DFEDC74E6B8F152E4C362DF1D4AE6A73D8E7942C3B7B6
3EC9C760818BB03F7FD90598C38B1C2E0C9A9A82F30A6D09BE359831087184E4
1CE590F9C8EDED3799036E39830C833D2145FE98DB93191B725AAD72FA5E361A
DCBD27F6AFE6B8BD4E941D2FC154BEA826E96D9F495C457E07231F5A0C22F4CC
10FDFD62A92291FFF95EA058592675FF83CAF282CE1420D724648387F15911D2
B84F2EEA849803EC5C4E36C41EE1C42B5BE29455A729387C6E48EFC3641A1DC5
9A816C933FF53190480F63F2F8A60EA6030C5280EFF0AB91AE4F207B83F190F6
CAA71ED3A9ED589420AEEA4251019D9DB3E7118514DE43D9EA8AC68B34377208
4D45B94B8234237161897CEAD7FDAEFD37AF16F6508654FE1A020FCE8DDE9CD3
808E90DB87A8990E38B639750FF981F584777FFE7F70184CA5F2D71DBAE877C1
C9F8FAA9EA41AFC5648A9DF227AADACB10D2B5559AF82FB527F91B78A4E2C074
E53B0C80CB15D3344DC5CDD0786273875E6D71EED2C06DB8B86C5FB6CD76F6CB
AFB90E8173A1937C9F42014E34A7B6E85F0DC42D3E0C3F20960D711B1D0791B6
056EA7E06D5885091CF68205E265093D13C6F89B4DBC3027B3CAF2C6EF0A5000
F53914FBAD3947E293CC426E38653A16E2A7EDF6D500E92370CBFA99FD6AC36D
436B89F0FFF57ADC4D7D461ECBA9188DC03492775B2B72DAA50008CE4A663353
A1DABECB7405ACB1E7F0998740F627B096F2BC91AFF565EE7754D3CC7C8C48CD
D889C389D35E4D4BF0BCF9866E9C02434ACE821D263606A374B64A01E25C9C7B
71D25836F5261558B2DB9CC40A1B28CF2F0146C91742FCF4AABAA935C0E086E0
3D6A47EDBE0DC8DB890D11DED0E6728CB0B554648DE5126DFE050330418FA930
7FF7B87DE5AC09FD05A1762B36FA02D42C15F4551678E44666351FB5B0F41859
AD6088A3E1CD3804FCF1AFAEA7E94428D6D723C01F3A732DD8185C51D6924059
A6B728D27C8018BECD829ACB6C3D9129E976A2427E19B3A34123CCBBCE2DE167
989F65A52386FC69EBEB6A5ABC8E80769A51F6D0206186F857B2FB2F403BECFD
B048D5A30D1827179CF6B4B45C14C9B744BD98DFB4A4D76D2BE36A796C72F84C
716C2B263C3C9F1B576490CC61CEF424A54E62107D2ADA1C19405B9CB4C577C2
96EE579D2F20575F4CA3B9DA9E2DC2EFF49CB9D7DAAF8E7E4BAAB9DE55C8366B
7853299DFF59BE6E7E2D1DE8C9A6F35977B13748FC54F228DFA267308F98D348
37B5A08E55E6319BE14383542B9F6500CD2881AC8DBFABB91D54CC819680322E
AB72E1250A7609730AFEAC9181A6C434512F6A544CCFF36F8AE8997175E17591
599FD621F6B710BF77D83180BB4741A69441040899809A443C00042C681FE3F9
BBDDA09127501567C7920FE0D18A619F3B355B53B61EC328513417071692AFE2
93731EE7455CCC4ED0ABEF6C73B6DAD43DAC1B4EA21D07C4D7BBA3AB19B14F14
90E5EFDC83ED5CD6F0A4C535708D4AF7A08C723C249E2405110BB7A1A79E3CE4
232E4A1335F1966DE7C21DF351097B1A6B69EB18BA4DD295682F6E109B03CAAD
F1C109B7ECA61ED5799165E2C781E6D9C2BE397CAD1E44C4FBA78931A2817EC3
709EEAB74AA7AD3CB3BF89F4FE0B82C18115E0E968F153DC61DEEB7273697AE8
307A0DAA3304BF771CEDC1ECC1EEA9D34523544C00B58BD9B64B27F7370B134C
DFFF3FC74BB62F8FBBF658F5DD930913F606819A6424208720BA9651272DB7C1
C5F468089493E3B7C7A3BE9AB31FFD0D9227EABE61529104A4598A0C9C494449
C69B415B8A30C5BCC1A675A4B95F5E9616A994F5C939186F31B32068A8F8286A
963283D1E73023BB66A4AE15DC7959BB36A10B51E962D36DF3651B03236C930A
1938932638DE190F010643F56A2E4551DDF8447E2850774583E5C7369094236C
F68BAFB8B7FB1145ECF9C2567A48B0C043C6D77A60803131733D7FFFE2E60835
E8E570EE206034708F5F2505D2837918E4FE0D10528AE392FD75F5D0150107E6
FB51D65779019E678CC8BAFC026639CE00ED9FDF7F8CEB6F526C3E6ED56F4F66
9CDA65742ED08E465EEB13A551E3CC27B40D67939C4B12F7B88D68D2720954D1
1A2C06C1EF79E4802C435D09B8A4D791F756E3D0BF3E28B666F7D0CAE721AC37
CD7617690233682AEC28B0224E5C15C3E4B1B7B9157998C8EADA678CE8FB887A
3F1E71E49A160E7007DE13A58C5F12F17BF9CFF15916DA577F2F42423A831E7B
530C47CBB6C865B195266297C9F0FC383BDBBF27066BFBB581B45B9D6BD04172
1579FA4264488F05B3A241A97FF89F4FDBC9A82518D63735A449640E720A6A53
3D1F96E6B5F6168E61D2AF2039DC1564DACA06FC80FBF52D178C5CDDF83E8179
015DE005E734C8414556DBD999E3E3BF746C6AB75018E394A882CFFE85F0C455
1385B4B0B8EE52A90030245B61EFCB42E309377B26CC941EFD253D08A28F4F96
5C8009F2965D6AC9C1B17CAEFFE206993D69EC4B6AC687A60F97011C38651DC3
961BF105F00FBEE106010F944ABA543686BDF539C884E8B42640338C5DD501D9
8D4FE72AFABDB6972004520E40365C8933953862241002CC42F60DAAE806A1D2
038820EFB8EB39549367C51173364B61ECA94E8E23478E4442B9F54CB67DF00E
328163B2598223055DA547E67FD9243DE90E50F4E32666BA4DCA77D57DB78807
9B38128B2D3032A67CA20FDDF05A088550EF6DC440C876FDF8636FB388C8CE77
3B6EBDD549B4D7ED242D12AD498B1326EFA4A6AFF7F0DD4B8708FEFBBC51F1B9
976C930EEF0BF8E2486120241BBA8D588499863212DCC341990878AEE25EEA21
F473DCCB9669ABA8CE7120725F59C379AC808E4B6B8994F08D84EFB7AA8A4B9E
8289C783C54BC61D9C644E3FCB0DE96B095B4D29114FDD325E6CEF2AE0826395
0FE95EB5009F45AE06FDD46DCB8CFB0F96E0D4388AC847D26C6C20D11266F791
3970C783EF6D587F638339DF1F38B8F55BD530F47194B01D884B979CAEFF660A
8D30BB6FB9AB612CDD70EFCC7724040AA09F6F1CB6C2FCD1B6BFFA03CD3EC753
26188E2D345BA74D3C20EDAAD93A0740104CA975C8BE8F908D1EEE886B955386
4D2CC46E07875B2467984321463C6F1E62512F866A7EFF5EE913AA916309EB9E
000E3491DBFB17AA6A483BD8D464A2F7697A696EC0CB11217EC2DCDDB38BC20B
1DD158C0EF082D34EF6922D769B50B59356D2B2CD4437114437EA586155CB69C
5930872198929965568B7D63884BE0F950DF92454C7C30E787EE96F81989B5F2
517CE5E56C96818FFE3D730E2D13FA04E8D518803C262E5AA20727765E0FC142
571465A0B9EACA12D862B41F35EE1A2A2CC41797078AEC65C4270F5AB8E1C2C3
BFD3C0F3C03B4A740A7EFE68821025EA1940AC4648842F5AEEFA4FF7CF5A1D66
F09D8DF60001F29885CAD7BB99810F131D9959B9B370AB666B48CEBE7990BAF6
1853E0A54487A84A1FE082E45E700D4C8E68D7B39596A161B8C98E2255E6F464
E2380293B2AE5FF3E811F817EB8DA637CFAD90EC3AB608857D8ACB1CE6C5844B
912A805E88715F8AAEAC35F67D38DD1E98BB668C928D6DB72BA1E564E0DF5AA4
EDF391E20F017F97C77C3BDCF8AF21FA518647CFDC2C200048863448446CBDF7
BAABC6E1A0A248CFF0B65999F5BFD8BB71A6CFB6830C394E62423A0D22D51EF2
4DCBE949D7F82E5059727637A7399FACE02A9D3F119E9C9E53EEEF0E4A0EDF20
E5332262C12D8255314897422139DD5CB0CA1C0101E5A6CED7955DAE29F46951
712C354B1EB67CF67A7494A7D4C222B2F41A5B13905CA8979F9D0C95ACFDB80D
30485B8E3AA8367D82EF814BD034C8EC75A2CF62E56BBF35D257EA81F3132088
50E5F96002877A4E1D4DC07C74E5640811C605A342D0228DF7D7A879AA4E5365
88950AFE1569BCB72F430EFBCBEA10B8F185B26D56DB2C1D1898A50476871C09
324D830DE58F41C50E3FC2B5809854C76B68627823107B961AD972D73668F314
0D91B438122655D99E49C85E642461E861A52ED4AF95A944FC44AD90E9F758DB
6319970BF726ABB2C6694A816A7E158615829E59EE73573363006C5E0264CC53
EAD28CE88289207B582DD18508705EBF42ED705F329243060D79DC3EE65EFD9B
ADA02F56A083F23E0EB2729F2C58CEDF15A062D0A6C11C80CF098B6FF04D54F3
B92577D3155B0F003E981B4523D97EC267275588FF4437639111B0795DF3A708
256D295BEADE093598F9063BD7DC3210D330CD53890E3F3DE504E72D83C940A7
85DE55342C3C27D9363A63055969DDEA2B5F5FA44B00C3FF3A547B463BBC77A7
E1C0C043220A3B7A6E106CDD4D82C536D747B3F94810F797DBD1914F6A29DCF1
798DA153A349DF9D95D5D24C4B6B2795D94BDEB015C731EDF9ED325CC1170476
B17BCDA45C640C583F16DA2070280800218DDE862922A8F80A0DD8B36675E833
71DDD08041EA9752E33AAE83E984389A3B3720FF0128C29E7F9F549BFA0C1CDD
F679DEDA691E30773C286B1BA80CF19503CB79B54CEC2B71F11EE71DCB66D9AA
F679DD248DA6A642FF1E83E1FA20A5D12D8DADC362E56BBF35D257EA1573BFFB
06C10C1B4175EF457483C7AA1F63CAE7B6C483F1E271980392051811CD913D63
B751E6907711E0F2F5ABC6C9CA249AA799053DB14C532BD6364CB187067D097A
8400DB95806FDF25603E4E215531C3F70436472D2381DEA09B8B3BCB109BCD72
332A9483E545F28430C8A598E52A920E733C270451B5A9923E52A70AA67BCBB1
8285BD9C0C838711A76C5B5D57F356EF49C475AC3C97FCC08A6E6797D9D6D4D6
794945B39D2712AA2859A2F650ADE86CF4EC93FEA60A7F5A9873AA7AD74CD02A
CCBFEA0148283EAD2E621FD650A01D43380666AEA8C1C19267AD441581D7A43E
C3324CFF3DAB7E12D3389616B0A7A154D9577EB6EDFB9F157911E60BFC3DC5BF
E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9B700EAFE4889EE5F338D3C48
85368281B3C95CCE251C28BD790A718913B4E954FB295BAEF9F883A62A5A34C2
E8E974FFDAC418304EF0DE744C7BC19915DD1F2977EA82C86E92D3FD4AC76A70
70F1256E6D2D094E6F7129F9B4C3E7E19A52FF68CA77C740D09D1E1E24BBA12D
82BE8A53A36752E00DEEA7DF3435B856A60436046A69A5AD798D7E1614B42976
8941BA21A3F91EBE7C1D371E2026FC381D8D871D9F6F4EA182A40F0A37041A94
F374578493ED03393839636C78399E063C0AAFFF0F3F06C295954A3906B1AA51
0DBF0FF76FDB8121ADE0CF9DF0F51C21FE0EC02F9FA36AA16B3E03A41291574A
3393809076568C02F432A7A3B60312B72BB580FD32CDE408482F4D905733F394
234D3934FFF71D33136969C587CA19436247AC6C70401D97979FA7EB6DDD5D9C
1B3F79A0F0C468C1C29E1C20626B4D9A9F92A2414E99FF0622C6B3693A682807
A12295A5A146A0C8B36388F767FAC8B4EBEA0E5893382B315B2B0C2C39463DB2
22F3D17663E2E25BC369F9E094F51817ED4B1C7E731B0C4228F60914A26471A8
2E9B294AAD0A52A21FB5EF87F67D64F1F2C0AE42D9CEB595788FCFAC3031FD3B
C49759C2D5576FE3E60276CA3A510ED7491E9A1B904288F198CAC00BEA5D0203
91179FD99528C96789A390E52C5E8815DD11012C1C832C4E19AD22C4949E9D7C
1D19CF3CA97825DCAEEBEFDC269EE1097EFA52668964D51733F5383B80D637D7
61A77C89555EFEA66F3F55B6A0CC7DEF31B318AB855EDCDC2880532D290EB12A
9CD347817ACFB338CA0D465D2AF6253313B6D1692448A54E7C9379E195793E5B
97872BDE1BDE074F7809374FAA5D3E7E0260F65582129897CF87398F8ACE647D
FA3B361D7F11B54B412A3BC7AC42B2DAE95A8DECEFC1F5FFBE29412CEC24B5EE
5BAE2EC7555347FE6335AA1AD2E91846D59CBA6DD8F7A694BF091503EC5F08ED
6903476CB4D168995E0960424D64188C32C49A2B386A8B5FD1B75EB7B3C96FCD
E4D274154A6043889B0C918B4D80C0877E8C4E20FA1C301AE57543BC379D6A09
9AB51C70DDD7CAFAA9F401092E18EA3FB509182CDF2B242E00CCA79DF73B6A22
1820A37D39773ED0B64CEC33739E0F174E52C08289FE861CC575232A28F6BE08
6FDD561C44853EDE57BE3CE3E0D2E3042DC9767C407CF1EF700D61DCC7D2E9EF
EB5217D7E47C38DF21C32188F27377130B9FD050555BE88A9BB3AB135623655A
23819AE03998AA495E7E197C7FE64629E6E66C7D2AD24474C15D6FB1CA739483
B0E442FCBA7E603971613D9FD6EA2487924159DA08D7C872C1656C578C3A4F5E
AC77201FF73D6F6B770C32EC1167134B3E3C9D6875DDBC01B8F67F7B932FFE75
349320256CB0F6BD29CA5E7F2A6AE9C67E375AE0422C0A53008DFDE620222594
A2D5777703D9F56FF050EA1A69F35A4A217549ECE8542976452AD5AD4E6D5036
E52E68D1E173E47B3EB5DE354788B4DC4173B1120D0241CF23372774C4CEF492
B8CB0011FC41132119C3DB3ADEA5836E53352BEEE91CCB9CB28133B8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/UniqueID 5087386 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 21 /lambda put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427084643B66BB9181094E29D
5FBE37708E1D8A6B7518A96876844CB66954227A7A6AF28DD075A462526DD5D6
40EECC56FA366106E55C7068997B54B7F0D03AC1AD45D28C67C7ECA99DBEDB1C
E18A79C353113E2E05B837E703278B202112B1C69E42A69D64B62F0E7D8F7E5B
C1F93F0F99EC20EF312046F4B0CD7DAB31E422070B629A7FA96583CF3F1519CD
CF08806F40ACD7BB5C960F21E9DA7FB3C72CBA0801ADE83DF738A4EC94F2977D
2B95A166BA5655E4E4075807E0F38521430B4EB6B722387E0957ABAC4154FEFB
3176DADA406FF032475AEE1CE2C281049A408063F104535CAA2E7DAE2B768E6E
165BC8040D6C98090C372BF90FC389A20A9CF758831EEBA2B7616EA2AC53672B
CC71354F8567B9C61A98BAB478FAF6EA04CFDF7926E590ACCD9266C824477168
51145278746C85BA904296B398DCD544D060A80D7FCD024F3DC042F4E7B88405
D15558A2C7E77AD3779AEFBB2233EA71AA1C06450F403A6DCE06EC145183F201
B20F7628C20293BFE0465F7AECF1C4837B5EC7D36FFDDB9817E336A31D704238
98A128BCB0AC4FE87095372EF9A4133EEA8050D801D797A1C275ED9570B160
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 52099146 40258431 2074 600 600 (slides.dvi)
@start /Fa 137[93 1[59 1[69 2[93 107 152 3[48 107 96
59 93 54[52 46[{ TeXBase1Encoding ReEncodeFont }12 172.188
/URWBookmanL-LighItal rf /Fb 202[75 75 75 75 75 49[{
 TeXBase1Encoding ReEncodeFont }5 120.531 /URWBookmanL-Ligh
rf /Fc 136[103 2[103 1[103 1[103 103 1[103 4[103 103
1[103 1[103 34[103 5[103 10[103 103 46[{ TeXBase1Encoding ReEncodeFont }
14 172.188 /NimbusMonL-Bold rf /Fd 134[107 2[103 1[79
90 79 1[110 107 1[172 1[114 1[62 117 2[100 110 1[103
100 18[127 162 5[134 2[134 127 1[124 1[114 11[114 114
114 114 3[59 44[{ TeXBase1Encoding ReEncodeFont }27 172.188
/URWBookmanL-DemiBold rf /Fe 139[95 107 95 1[132 128
141 207 70 2[74 1[120 1[120 132 2[120 13[136 3[165 2[132
4[161 2[161 153 15[136 17[74 33[{ TeXBase1Encoding ReEncodeFont }21
206.625 /URWBookmanL-DemiBold rf /Ff 138[291 188 231
3[257 291 4[163 1[266 1[240 19[326 4[274 12[266 63[{
 TeXBase1Encoding ReEncodeFont }11 428.403 /URWBookmanL-DemiBoldItal
rf /Fg 234[245 21[{}1 428.403 /CMMI12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 @landscape end
%%EndSetup
%%Page: 1 1
TeXDict begin @landscape 1 0 bop 0 TeXcolorgray -600
4500 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 4500 a -600 4500 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600 4500 a 138 3828 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.92859 SLW 0.8 0.85 0.9  setrgbcolor  14.22636 false 12.38211 neg
12.38211 neg 308.56273 231.90431 .5 Frame  gsave 2.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 0.9 0.95 1
 setrgbcolor gsave fill grestore stroke grestore gsave 1.92859 SLW
0.8 0.85 0.9  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial Blue Blue Blue
1675 1061 a Fg(\025)146 b Ff(Lounge)p Blue Blue 1326
1506 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0. true 3.8 neg 6.39798 neg 159.79825 12.61989
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 1  setgray gsave fill grestore stroke grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial Fe(OpenGL)71
b(in)f(Common)f(Lisp)1659 2055 y Fd(Christopher)59 b(Mark)f(Gor)n(e)
1655 2348 y Fc(http://www.cgore.com)1913 2640 y(cgore@cgore.com)1267
3050 y Fd(???day,)f(November)j(??,)d(AD)i(2013)p Black
2663 4347 a Fb(1)p eop end
%%Page: 2 2
TeXDict begin @landscape 2 1 bop Blue 0 TeXcolorgray
138 3828 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.92859 SLW 0.8 0.85 0.9  setrgbcolor  14.22636 false 12.38211 neg
12.38211 neg 308.56273 231.90431 .5 Frame  gsave 2.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 0.9 0.95 1
 setrgbcolor gsave fill grestore stroke grestore gsave 1.92859 SLW
0.8 0.85 0.9  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray Blue 2027 1979 a Fe(Lisp)71 b(is)g(Cool!)p
0 TeXcolorgray 2663 4347 a Fb(2)p eop end
%%Page: 3 3
TeXDict begin @landscape 3 2 bop 0 TeXcolorgray 138 3828
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.92859 SLW 0.8 0.85 0.9  setrgbcolor  14.22636 false 12.38211 neg
12.38211 neg 308.56273 231.90431 .5 Frame  gsave 2.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 0.9 0.95 1
 setrgbcolor gsave fill grestore stroke grestore gsave 1.92859 SLW
0.8 0.85 0.9  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray Blue 2101 2000 a Fe(3D)71 b(is)g(Cool!)p
0 TeXcolorgray 2663 4347 a Fb(3)p eop end
%%Page: 4 4
TeXDict begin @landscape 4 3 bop 0 TeXcolorgray 138 3828
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.92859 SLW 0.8 0.85 0.9  setrgbcolor  14.22636 false 12.38211 neg
12.38211 neg 308.56273 231.90431 .5 Frame  gsave 2.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 0.9 0.95 1
 setrgbcolor gsave fill grestore stroke grestore gsave 1.92859 SLW
0.8 0.85 0.9  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray Blue 1853 1819 a Fe(Getting)70 b(Started)p
0 TeXcolorgray 138 2171 a Fa(info)51 b(on)g(getting)h(the)f(envir)n
(onment)f(going)j(...)2663 4347 y Fb(4)p eop end
%%Page: 5 5
TeXDict begin @landscape 5 4 bop 0 TeXcolorgray 138 3828
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.92859 SLW 0.8 0.85 0.9  setrgbcolor  14.22636 false 12.38211 neg
12.38211 neg 308.56273 231.90431 .5 Frame  gsave 2.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 0.9 0.95 1
 setrgbcolor gsave fill grestore stroke grestore gsave 1.92859 SLW
0.8 0.85 0.9  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray Blue 1435 2041 a Ff(Questions?)p 0 TeXcolorgray
2663 4347 a Fb(5)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
